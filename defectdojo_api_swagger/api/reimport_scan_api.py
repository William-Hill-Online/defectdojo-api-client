# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from defectdojo_api_swagger.api_client import ApiClient


class ReimportScanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reimport_scan_create(self, scan_date, scan_type, test, **kwargs):  # noqa: E501
        """reimport_scan_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reimport_scan_create(scan_date, scan_type, test, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date scan_date: (required)
        :param str scan_type: (required)
        :param int test: (required)
        :param str minimum_severity:
        :param bool active:
        :param bool verified:
        :param int endpoint_to_add:
        :param file file:
        :param bool push_to_jira:
        :return: ReImportScan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reimport_scan_create_with_http_info(scan_date, scan_type, test, **kwargs)  # noqa: E501
        else:
            (data) = self.reimport_scan_create_with_http_info(scan_date, scan_type, test, **kwargs)  # noqa: E501
            return data

    def reimport_scan_create_with_http_info(self, scan_date, scan_type, test, **kwargs):  # noqa: E501
        """reimport_scan_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reimport_scan_create_with_http_info(scan_date, scan_type, test, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date scan_date: (required)
        :param str scan_type: (required)
        :param int test: (required)
        :param str minimum_severity:
        :param bool active:
        :param bool verified:
        :param int endpoint_to_add:
        :param file file:
        :param bool push_to_jira:
        :return: ReImportScan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_date', 'scan_type', 'test', 'minimum_severity', 'active', 'verified', 'endpoint_to_add', 'file', 'push_to_jira']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reimport_scan_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_date' is set
        if ('scan_date' not in params or
                params['scan_date'] is None):
            raise ValueError("Missing the required parameter `scan_date` when calling `reimport_scan_create`")  # noqa: E501
        # verify the required parameter 'scan_type' is set
        if ('scan_type' not in params or
                params['scan_type'] is None):
            raise ValueError("Missing the required parameter `scan_type` when calling `reimport_scan_create`")  # noqa: E501
        # verify the required parameter 'test' is set
        if ('test' not in params or
                params['test'] is None):
            raise ValueError("Missing the required parameter `test` when calling `reimport_scan_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'scan_date' in params:
            form_params.append(('scan_date', params['scan_date']))  # noqa: E501
        if 'minimum_severity' in params:
            form_params.append(('minimum_severity', params['minimum_severity']))  # noqa: E501
        if 'active' in params:
            form_params.append(('active', params['active']))  # noqa: E501
        if 'verified' in params:
            form_params.append(('verified', params['verified']))  # noqa: E501
        if 'scan_type' in params:
            form_params.append(('scan_type', params['scan_type']))  # noqa: E501
        if 'endpoint_to_add' in params:
            form_params.append(('endpoint_to_add', params['endpoint_to_add']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'test' in params:
            form_params.append(('test', params['test']))  # noqa: E501
        if 'push_to_jira' in params:
            form_params.append(('push_to_jira', params['push_to_jira']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/reimport-scan/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReImportScan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
