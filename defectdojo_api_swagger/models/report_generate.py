# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReportGenerate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'executive_summary': 'ExecutiveSummary',
        'product_type': 'ProductType',
        'product': 'Product',
        'engagement': 'Engagement',
        'report_name': 'str',
        'report_info': 'str',
        'test': 'Test',
        'endpoint': 'Endpoint',
        'endpoints': 'list[Endpoint]',
        'findings': 'list[Finding]',
        'user': 'User',
        'team_name': 'str',
        'title': 'str',
        'user_id': 'int',
        'host': 'str',
        'finding_images': 'list[FindingToFindingImages]',
        'finding_notes': 'list[FindingToNotes]'
    }

    attribute_map = {
        'executive_summary': 'executive_summary',
        'product_type': 'product_type',
        'product': 'product',
        'engagement': 'engagement',
        'report_name': 'report_name',
        'report_info': 'report_info',
        'test': 'test',
        'endpoint': 'endpoint',
        'endpoints': 'endpoints',
        'findings': 'findings',
        'user': 'user',
        'team_name': 'team_name',
        'title': 'title',
        'user_id': 'user_id',
        'host': 'host',
        'finding_images': 'finding_images',
        'finding_notes': 'finding_notes'
    }

    def __init__(self, executive_summary=None, product_type=None, product=None, engagement=None, report_name=None, report_info=None, test=None, endpoint=None, endpoints=None, findings=None, user=None, team_name=None, title=None, user_id=None, host=None, finding_images=None, finding_notes=None):  # noqa: E501
        """ReportGenerate - a model defined in Swagger"""  # noqa: E501

        self._executive_summary = None
        self._product_type = None
        self._product = None
        self._engagement = None
        self._report_name = None
        self._report_info = None
        self._test = None
        self._endpoint = None
        self._endpoints = None
        self._findings = None
        self._user = None
        self._team_name = None
        self._title = None
        self._user_id = None
        self._host = None
        self._finding_images = None
        self._finding_notes = None
        self.discriminator = None

        self.executive_summary = executive_summary
        if product_type is not None:
            self.product_type = product_type
        if product is not None:
            self.product = product
        if engagement is not None:
            self.engagement = engagement
        self.report_name = report_name
        self.report_info = report_info
        if test is not None:
            self.test = test
        if endpoint is not None:
            self.endpoint = endpoint
        if endpoints is not None:
            self.endpoints = endpoints
        if findings is not None:
            self.findings = findings
        if user is not None:
            self.user = user
        self.team_name = team_name
        self.title = title
        self.user_id = user_id
        self.host = host
        if finding_images is not None:
            self.finding_images = finding_images
        if finding_notes is not None:
            self.finding_notes = finding_notes

    @property
    def executive_summary(self):
        """Gets the executive_summary of this ReportGenerate.  # noqa: E501


        :return: The executive_summary of this ReportGenerate.  # noqa: E501
        :rtype: ExecutiveSummary
        """
        return self._executive_summary

    @executive_summary.setter
    def executive_summary(self, executive_summary):
        """Sets the executive_summary of this ReportGenerate.


        :param executive_summary: The executive_summary of this ReportGenerate.  # noqa: E501
        :type: ExecutiveSummary
        """
        if executive_summary is None:
            raise ValueError("Invalid value for `executive_summary`, must not be `None`")  # noqa: E501

        self._executive_summary = executive_summary

    @property
    def product_type(self):
        """Gets the product_type of this ReportGenerate.  # noqa: E501


        :return: The product_type of this ReportGenerate.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ReportGenerate.


        :param product_type: The product_type of this ReportGenerate.  # noqa: E501
        :type: ProductType
        """

        self._product_type = product_type

    @property
    def product(self):
        """Gets the product of this ReportGenerate.  # noqa: E501


        :return: The product of this ReportGenerate.  # noqa: E501
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ReportGenerate.


        :param product: The product of this ReportGenerate.  # noqa: E501
        :type: Product
        """

        self._product = product

    @property
    def engagement(self):
        """Gets the engagement of this ReportGenerate.  # noqa: E501


        :return: The engagement of this ReportGenerate.  # noqa: E501
        :rtype: Engagement
        """
        return self._engagement

    @engagement.setter
    def engagement(self, engagement):
        """Sets the engagement of this ReportGenerate.


        :param engagement: The engagement of this ReportGenerate.  # noqa: E501
        :type: Engagement
        """

        self._engagement = engagement

    @property
    def report_name(self):
        """Gets the report_name of this ReportGenerate.  # noqa: E501


        :return: The report_name of this ReportGenerate.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this ReportGenerate.


        :param report_name: The report_name of this ReportGenerate.  # noqa: E501
        :type: str
        """
        if report_name is None:
            raise ValueError("Invalid value for `report_name`, must not be `None`")  # noqa: E501
        if report_name is not None and len(report_name) > 200:
            raise ValueError("Invalid value for `report_name`, length must be less than or equal to `200`")  # noqa: E501
        if report_name is not None and len(report_name) < 1:
            raise ValueError("Invalid value for `report_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._report_name = report_name

    @property
    def report_info(self):
        """Gets the report_info of this ReportGenerate.  # noqa: E501


        :return: The report_info of this ReportGenerate.  # noqa: E501
        :rtype: str
        """
        return self._report_info

    @report_info.setter
    def report_info(self, report_info):
        """Sets the report_info of this ReportGenerate.


        :param report_info: The report_info of this ReportGenerate.  # noqa: E501
        :type: str
        """
        if report_info is None:
            raise ValueError("Invalid value for `report_info`, must not be `None`")  # noqa: E501
        if report_info is not None and len(report_info) > 200:
            raise ValueError("Invalid value for `report_info`, length must be less than or equal to `200`")  # noqa: E501
        if report_info is not None and len(report_info) < 1:
            raise ValueError("Invalid value for `report_info`, length must be greater than or equal to `1`")  # noqa: E501

        self._report_info = report_info

    @property
    def test(self):
        """Gets the test of this ReportGenerate.  # noqa: E501


        :return: The test of this ReportGenerate.  # noqa: E501
        :rtype: Test
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ReportGenerate.


        :param test: The test of this ReportGenerate.  # noqa: E501
        :type: Test
        """

        self._test = test

    @property
    def endpoint(self):
        """Gets the endpoint of this ReportGenerate.  # noqa: E501


        :return: The endpoint of this ReportGenerate.  # noqa: E501
        :rtype: Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ReportGenerate.


        :param endpoint: The endpoint of this ReportGenerate.  # noqa: E501
        :type: Endpoint
        """

        self._endpoint = endpoint

    @property
    def endpoints(self):
        """Gets the endpoints of this ReportGenerate.  # noqa: E501


        :return: The endpoints of this ReportGenerate.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ReportGenerate.


        :param endpoints: The endpoints of this ReportGenerate.  # noqa: E501
        :type: list[Endpoint]
        """

        self._endpoints = endpoints

    @property
    def findings(self):
        """Gets the findings of this ReportGenerate.  # noqa: E501


        :return: The findings of this ReportGenerate.  # noqa: E501
        :rtype: list[Finding]
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this ReportGenerate.


        :param findings: The findings of this ReportGenerate.  # noqa: E501
        :type: list[Finding]
        """

        self._findings = findings

    @property
    def user(self):
        """Gets the user of this ReportGenerate.  # noqa: E501


        :return: The user of this ReportGenerate.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReportGenerate.


        :param user: The user of this ReportGenerate.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def team_name(self):
        """Gets the team_name of this ReportGenerate.  # noqa: E501


        :return: The team_name of this ReportGenerate.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this ReportGenerate.


        :param team_name: The team_name of this ReportGenerate.  # noqa: E501
        :type: str
        """
        if team_name is None:
            raise ValueError("Invalid value for `team_name`, must not be `None`")  # noqa: E501
        if team_name is not None and len(team_name) > 200:
            raise ValueError("Invalid value for `team_name`, length must be less than or equal to `200`")  # noqa: E501
        if team_name is not None and len(team_name) < 1:
            raise ValueError("Invalid value for `team_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._team_name = team_name

    @property
    def title(self):
        """Gets the title of this ReportGenerate.  # noqa: E501


        :return: The title of this ReportGenerate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportGenerate.


        :param title: The title of this ReportGenerate.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 200:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `200`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def user_id(self):
        """Gets the user_id of this ReportGenerate.  # noqa: E501


        :return: The user_id of this ReportGenerate.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ReportGenerate.


        :param user_id: The user_id of this ReportGenerate.  # noqa: E501
        :type: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def host(self):
        """Gets the host of this ReportGenerate.  # noqa: E501


        :return: The host of this ReportGenerate.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ReportGenerate.


        :param host: The host of this ReportGenerate.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501
        if host is not None and len(host) > 200:
            raise ValueError("Invalid value for `host`, length must be less than or equal to `200`")  # noqa: E501
        if host is not None and len(host) < 1:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def finding_images(self):
        """Gets the finding_images of this ReportGenerate.  # noqa: E501


        :return: The finding_images of this ReportGenerate.  # noqa: E501
        :rtype: list[FindingToFindingImages]
        """
        return self._finding_images

    @finding_images.setter
    def finding_images(self, finding_images):
        """Sets the finding_images of this ReportGenerate.


        :param finding_images: The finding_images of this ReportGenerate.  # noqa: E501
        :type: list[FindingToFindingImages]
        """

        self._finding_images = finding_images

    @property
    def finding_notes(self):
        """Gets the finding_notes of this ReportGenerate.  # noqa: E501


        :return: The finding_notes of this ReportGenerate.  # noqa: E501
        :rtype: list[FindingToNotes]
        """
        return self._finding_notes

    @finding_notes.setter
    def finding_notes(self, finding_notes):
        """Sets the finding_notes of this ReportGenerate.


        :param finding_notes: The finding_notes of this ReportGenerate.  # noqa: E501
        :type: list[FindingToNotes]
        """

        self._finding_notes = finding_notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportGenerate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportGenerate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
