# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Finding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'images': 'list[FindingImage]',
        'tags': 'list[str]',
        'accepted_risks': 'list[RiskAcceptance]',
        'push_to_jira': 'bool',
        'age': 'int',
        'sla_days_remaining': 'int',
        'title': 'str',
        '_date': 'date',
        'cwe': 'int',
        'cve': 'str',
        'url': 'str',
        'severity': 'str',
        'description': 'str',
        'mitigation': 'str',
        'impact': 'str',
        'steps_to_reproduce': 'str',
        'severity_justification': 'str',
        'references': 'str',
        'is_template': 'bool',
        'active': 'bool',
        'verified': 'bool',
        'false_p': 'bool',
        'duplicate': 'bool',
        'out_of_scope': 'bool',
        'under_review': 'bool',
        'under_defect_review': 'bool',
        'is_mitigated': 'bool',
        'thread_id': 'int',
        'mitigated': 'datetime',
        'numerical_severity': 'str',
        'last_reviewed': 'datetime',
        'line_number': 'str',
        'sourcefilepath': 'str',
        'sourcefile': 'str',
        'param': 'str',
        'payload': 'str',
        'hash_code': 'str',
        'line': 'int',
        'file_path': 'str',
        'component_name': 'str',
        'component_version': 'str',
        'static_finding': 'bool',
        'dynamic_finding': 'bool',
        'created': 'datetime',
        'jira_creation': 'datetime',
        'jira_change': 'datetime',
        'scanner_confidence': 'int',
        'unique_id_from_tool': 'str',
        'sast_source_object': 'str',
        'sast_sink_object': 'str',
        'sast_source_line': 'int',
        'sast_source_file_path': 'str',
        'nb_occurences': 'int',
        'test': 'int',
        'duplicate_finding': 'int',
        'review_requested_by': 'int',
        'defect_review_requested_by': 'int',
        'mitigated_by': 'int',
        'reporter': 'int',
        'last_reviewed_by': 'int',
        'sonarqube_issue': 'int',
        'endpoints': 'list[int]',
        'reviewers': 'list[int]',
        'notes': 'list[Note]',
        'found_by': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'images': 'images',
        'tags': 'tags',
        'accepted_risks': 'accepted_risks',
        'push_to_jira': 'push_to_jira',
        'age': 'age',
        'sla_days_remaining': 'sla_days_remaining',
        'title': 'title',
        '_date': 'date',
        'cwe': 'cwe',
        'cve': 'cve',
        'url': 'url',
        'severity': 'severity',
        'description': 'description',
        'mitigation': 'mitigation',
        'impact': 'impact',
        'steps_to_reproduce': 'steps_to_reproduce',
        'severity_justification': 'severity_justification',
        'references': 'references',
        'is_template': 'is_template',
        'active': 'active',
        'verified': 'verified',
        'false_p': 'false_p',
        'duplicate': 'duplicate',
        'out_of_scope': 'out_of_scope',
        'under_review': 'under_review',
        'under_defect_review': 'under_defect_review',
        'is_mitigated': 'is_Mitigated',
        'thread_id': 'thread_id',
        'mitigated': 'mitigated',
        'numerical_severity': 'numerical_severity',
        'last_reviewed': 'last_reviewed',
        'line_number': 'line_number',
        'sourcefilepath': 'sourcefilepath',
        'sourcefile': 'sourcefile',
        'param': 'param',
        'payload': 'payload',
        'hash_code': 'hash_code',
        'line': 'line',
        'file_path': 'file_path',
        'component_name': 'component_name',
        'component_version': 'component_version',
        'static_finding': 'static_finding',
        'dynamic_finding': 'dynamic_finding',
        'created': 'created',
        'jira_creation': 'jira_creation',
        'jira_change': 'jira_change',
        'scanner_confidence': 'scanner_confidence',
        'unique_id_from_tool': 'unique_id_from_tool',
        'sast_source_object': 'sast_source_object',
        'sast_sink_object': 'sast_sink_object',
        'sast_source_line': 'sast_source_line',
        'sast_source_file_path': 'sast_source_file_path',
        'nb_occurences': 'nb_occurences',
        'test': 'test',
        'duplicate_finding': 'duplicate_finding',
        'review_requested_by': 'review_requested_by',
        'defect_review_requested_by': 'defect_review_requested_by',
        'mitigated_by': 'mitigated_by',
        'reporter': 'reporter',
        'last_reviewed_by': 'last_reviewed_by',
        'sonarqube_issue': 'sonarqube_issue',
        'endpoints': 'endpoints',
        'reviewers': 'reviewers',
        'notes': 'notes',
        'found_by': 'found_by'
    }

    def __init__(self, id=None, images=None, tags=None, accepted_risks=None, push_to_jira=False, age=None, sla_days_remaining=None, title=None, _date=None, cwe=None, cve=None, url=None, severity=None, description=None, mitigation=None, impact=None, steps_to_reproduce=None, severity_justification=None, references=None, is_template=None, active=None, verified=None, false_p=None, duplicate=None, out_of_scope=None, under_review=None, under_defect_review=None, is_mitigated=None, thread_id=None, mitigated=None, numerical_severity=None, last_reviewed=None, line_number=None, sourcefilepath=None, sourcefile=None, param=None, payload=None, hash_code=None, line=None, file_path=None, component_name=None, component_version=None, static_finding=None, dynamic_finding=None, created=None, jira_creation=None, jira_change=None, scanner_confidence=None, unique_id_from_tool=None, sast_source_object=None, sast_sink_object=None, sast_source_line=None, sast_source_file_path=None, nb_occurences=None, test=None, duplicate_finding=None, review_requested_by=None, defect_review_requested_by=None, mitigated_by=None, reporter=None, last_reviewed_by=None, sonarqube_issue=None, endpoints=None, reviewers=None, notes=None, found_by=None):  # noqa: E501
        """Finding - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._images = None
        self._tags = None
        self._accepted_risks = None
        self._push_to_jira = None
        self._age = None
        self._sla_days_remaining = None
        self._title = None
        self.__date = None
        self._cwe = None
        self._cve = None
        self._url = None
        self._severity = None
        self._description = None
        self._mitigation = None
        self._impact = None
        self._steps_to_reproduce = None
        self._severity_justification = None
        self._references = None
        self._is_template = None
        self._active = None
        self._verified = None
        self._false_p = None
        self._duplicate = None
        self._out_of_scope = None
        self._under_review = None
        self._under_defect_review = None
        self._is_mitigated = None
        self._thread_id = None
        self._mitigated = None
        self._numerical_severity = None
        self._last_reviewed = None
        self._line_number = None
        self._sourcefilepath = None
        self._sourcefile = None
        self._param = None
        self._payload = None
        self._hash_code = None
        self._line = None
        self._file_path = None
        self._component_name = None
        self._component_version = None
        self._static_finding = None
        self._dynamic_finding = None
        self._created = None
        self._jira_creation = None
        self._jira_change = None
        self._scanner_confidence = None
        self._unique_id_from_tool = None
        self._sast_source_object = None
        self._sast_sink_object = None
        self._sast_source_line = None
        self._sast_source_file_path = None
        self._nb_occurences = None
        self._test = None
        self._duplicate_finding = None
        self._review_requested_by = None
        self._defect_review_requested_by = None
        self._mitigated_by = None
        self._reporter = None
        self._last_reviewed_by = None
        self._sonarqube_issue = None
        self._endpoints = None
        self._reviewers = None
        self._notes = None
        self._found_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if images is not None:
            self.images = images
        if tags is not None:
            self.tags = tags
        if accepted_risks is not None:
            self.accepted_risks = accepted_risks
        if push_to_jira is not None:
            self.push_to_jira = push_to_jira
        if age is not None:
            self.age = age
        if sla_days_remaining is not None:
            self.sla_days_remaining = sla_days_remaining
        self.title = title
        if _date is not None:
            self._date = _date
        if cwe is not None:
            self.cwe = cwe
        if cve is not None:
            self.cve = cve
        if url is not None:
            self.url = url
        self.severity = severity
        self.description = description
        self.mitigation = mitigation
        self.impact = impact
        if steps_to_reproduce is not None:
            self.steps_to_reproduce = steps_to_reproduce
        if severity_justification is not None:
            self.severity_justification = severity_justification
        if references is not None:
            self.references = references
        if is_template is not None:
            self.is_template = is_template
        if active is not None:
            self.active = active
        if verified is not None:
            self.verified = verified
        if false_p is not None:
            self.false_p = false_p
        if duplicate is not None:
            self.duplicate = duplicate
        if out_of_scope is not None:
            self.out_of_scope = out_of_scope
        if under_review is not None:
            self.under_review = under_review
        if under_defect_review is not None:
            self.under_defect_review = under_defect_review
        if is_mitigated is not None:
            self.is_mitigated = is_mitigated
        if thread_id is not None:
            self.thread_id = thread_id
        if mitigated is not None:
            self.mitigated = mitigated
        self.numerical_severity = numerical_severity
        if last_reviewed is not None:
            self.last_reviewed = last_reviewed
        if line_number is not None:
            self.line_number = line_number
        if sourcefilepath is not None:
            self.sourcefilepath = sourcefilepath
        if sourcefile is not None:
            self.sourcefile = sourcefile
        if param is not None:
            self.param = param
        if payload is not None:
            self.payload = payload
        if hash_code is not None:
            self.hash_code = hash_code
        if line is not None:
            self.line = line
        if file_path is not None:
            self.file_path = file_path
        if component_name is not None:
            self.component_name = component_name
        if component_version is not None:
            self.component_version = component_version
        if static_finding is not None:
            self.static_finding = static_finding
        if dynamic_finding is not None:
            self.dynamic_finding = dynamic_finding
        if created is not None:
            self.created = created
        if jira_creation is not None:
            self.jira_creation = jira_creation
        if jira_change is not None:
            self.jira_change = jira_change
        if scanner_confidence is not None:
            self.scanner_confidence = scanner_confidence
        if unique_id_from_tool is not None:
            self.unique_id_from_tool = unique_id_from_tool
        if sast_source_object is not None:
            self.sast_source_object = sast_source_object
        if sast_sink_object is not None:
            self.sast_sink_object = sast_sink_object
        if sast_source_line is not None:
            self.sast_source_line = sast_source_line
        if sast_source_file_path is not None:
            self.sast_source_file_path = sast_source_file_path
        if nb_occurences is not None:
            self.nb_occurences = nb_occurences
        if test is not None:
            self.test = test
        if duplicate_finding is not None:
            self.duplicate_finding = duplicate_finding
        if review_requested_by is not None:
            self.review_requested_by = review_requested_by
        if defect_review_requested_by is not None:
            self.defect_review_requested_by = defect_review_requested_by
        if mitigated_by is not None:
            self.mitigated_by = mitigated_by
        if reporter is not None:
            self.reporter = reporter
        if last_reviewed_by is not None:
            self.last_reviewed_by = last_reviewed_by
        if sonarqube_issue is not None:
            self.sonarqube_issue = sonarqube_issue
        if endpoints is not None:
            self.endpoints = endpoints
        if reviewers is not None:
            self.reviewers = reviewers
        if notes is not None:
            self.notes = notes
        if found_by is not None:
            self.found_by = found_by

    @property
    def id(self):
        """Gets the id of this Finding.  # noqa: E501


        :return: The id of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Finding.


        :param id: The id of this Finding.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this Finding.  # noqa: E501


        :return: The images of this Finding.  # noqa: E501
        :rtype: list[FindingImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Finding.


        :param images: The images of this Finding.  # noqa: E501
        :type: list[FindingImage]
        """

        self._images = images

    @property
    def tags(self):
        """Gets the tags of this Finding.  # noqa: E501


        :return: The tags of this Finding.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Finding.


        :param tags: The tags of this Finding.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def accepted_risks(self):
        """Gets the accepted_risks of this Finding.  # noqa: E501


        :return: The accepted_risks of this Finding.  # noqa: E501
        :rtype: list[RiskAcceptance]
        """
        return self._accepted_risks

    @accepted_risks.setter
    def accepted_risks(self, accepted_risks):
        """Sets the accepted_risks of this Finding.


        :param accepted_risks: The accepted_risks of this Finding.  # noqa: E501
        :type: list[RiskAcceptance]
        """

        self._accepted_risks = accepted_risks

    @property
    def push_to_jira(self):
        """Gets the push_to_jira of this Finding.  # noqa: E501


        :return: The push_to_jira of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._push_to_jira

    @push_to_jira.setter
    def push_to_jira(self, push_to_jira):
        """Sets the push_to_jira of this Finding.


        :param push_to_jira: The push_to_jira of this Finding.  # noqa: E501
        :type: bool
        """

        self._push_to_jira = push_to_jira

    @property
    def age(self):
        """Gets the age of this Finding.  # noqa: E501


        :return: The age of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Finding.


        :param age: The age of this Finding.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def sla_days_remaining(self):
        """Gets the sla_days_remaining of this Finding.  # noqa: E501


        :return: The sla_days_remaining of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._sla_days_remaining

    @sla_days_remaining.setter
    def sla_days_remaining(self, sla_days_remaining):
        """Sets the sla_days_remaining of this Finding.


        :param sla_days_remaining: The sla_days_remaining of this Finding.  # noqa: E501
        :type: int
        """

        self._sla_days_remaining = sla_days_remaining

    @property
    def title(self):
        """Gets the title of this Finding.  # noqa: E501


        :return: The title of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Finding.


        :param title: The title of this Finding.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 511:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `511`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def _date(self):
        """Gets the _date of this Finding.  # noqa: E501


        :return: The _date of this Finding.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Finding.


        :param _date: The _date of this Finding.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def cwe(self):
        """Gets the cwe of this Finding.  # noqa: E501


        :return: The cwe of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._cwe

    @cwe.setter
    def cwe(self, cwe):
        """Sets the cwe of this Finding.


        :param cwe: The cwe of this Finding.  # noqa: E501
        :type: int
        """
        if cwe is not None and cwe > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `cwe`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if cwe is not None and cwe < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `cwe`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._cwe = cwe

    @property
    def cve(self):
        """Gets the cve of this Finding.  # noqa: E501

        CVE or other vulnerability identifier  # noqa: E501

        :return: The cve of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this Finding.

        CVE or other vulnerability identifier  # noqa: E501

        :param cve: The cve of this Finding.  # noqa: E501
        :type: str
        """
        if cve is not None and len(cve) > 28:
            raise ValueError("Invalid value for `cve`, length must be less than or equal to `28`")  # noqa: E501
        if cve is not None and len(cve) < 1:
            raise ValueError("Invalid value for `cve`, length must be greater than or equal to `1`")  # noqa: E501
        if cve is not None and not re.search(r'^[A-Z]{1,10}(-\\d+)+$', cve):  # noqa: E501
            raise ValueError(r"Invalid value for `cve`, must be a follow pattern or equal to `/^[A-Z]{1,10}(-\\d+)+$/`")  # noqa: E501

        self._cve = cve

    @property
    def url(self):
        """Gets the url of this Finding.  # noqa: E501


        :return: The url of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Finding.


        :param url: The url of this Finding.  # noqa: E501
        :type: str
        """
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def severity(self):
        """Gets the severity of this Finding.  # noqa: E501

        The severity level of this flaw (Critical, High, Medium, Low, Informational)  # noqa: E501

        :return: The severity of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Finding.

        The severity level of this flaw (Critical, High, Medium, Low, Informational)  # noqa: E501

        :param severity: The severity of this Finding.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        if severity is not None and len(severity) > 200:
            raise ValueError("Invalid value for `severity`, length must be less than or equal to `200`")  # noqa: E501
        if severity is not None and len(severity) < 1:
            raise ValueError("Invalid value for `severity`, length must be greater than or equal to `1`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this Finding.  # noqa: E501


        :return: The description of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Finding.


        :param description: The description of this Finding.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def mitigation(self):
        """Gets the mitigation of this Finding.  # noqa: E501


        :return: The mitigation of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._mitigation

    @mitigation.setter
    def mitigation(self, mitigation):
        """Sets the mitigation of this Finding.


        :param mitigation: The mitigation of this Finding.  # noqa: E501
        :type: str
        """
        if mitigation is None:
            raise ValueError("Invalid value for `mitigation`, must not be `None`")  # noqa: E501
        if mitigation is not None and len(mitigation) < 1:
            raise ValueError("Invalid value for `mitigation`, length must be greater than or equal to `1`")  # noqa: E501

        self._mitigation = mitigation

    @property
    def impact(self):
        """Gets the impact of this Finding.  # noqa: E501


        :return: The impact of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this Finding.


        :param impact: The impact of this Finding.  # noqa: E501
        :type: str
        """
        if impact is None:
            raise ValueError("Invalid value for `impact`, must not be `None`")  # noqa: E501
        if impact is not None and len(impact) < 1:
            raise ValueError("Invalid value for `impact`, length must be greater than or equal to `1`")  # noqa: E501

        self._impact = impact

    @property
    def steps_to_reproduce(self):
        """Gets the steps_to_reproduce of this Finding.  # noqa: E501


        :return: The steps_to_reproduce of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._steps_to_reproduce

    @steps_to_reproduce.setter
    def steps_to_reproduce(self, steps_to_reproduce):
        """Sets the steps_to_reproduce of this Finding.


        :param steps_to_reproduce: The steps_to_reproduce of this Finding.  # noqa: E501
        :type: str
        """

        self._steps_to_reproduce = steps_to_reproduce

    @property
    def severity_justification(self):
        """Gets the severity_justification of this Finding.  # noqa: E501


        :return: The severity_justification of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._severity_justification

    @severity_justification.setter
    def severity_justification(self, severity_justification):
        """Sets the severity_justification of this Finding.


        :param severity_justification: The severity_justification of this Finding.  # noqa: E501
        :type: str
        """

        self._severity_justification = severity_justification

    @property
    def references(self):
        """Gets the references of this Finding.  # noqa: E501


        :return: The references of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Finding.


        :param references: The references of this Finding.  # noqa: E501
        :type: str
        """

        self._references = references

    @property
    def is_template(self):
        """Gets the is_template of this Finding.  # noqa: E501


        :return: The is_template of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this Finding.


        :param is_template: The is_template of this Finding.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    @property
    def active(self):
        """Gets the active of this Finding.  # noqa: E501


        :return: The active of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Finding.


        :param active: The active of this Finding.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def verified(self):
        """Gets the verified of this Finding.  # noqa: E501


        :return: The verified of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Finding.


        :param verified: The verified of this Finding.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def false_p(self):
        """Gets the false_p of this Finding.  # noqa: E501


        :return: The false_p of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._false_p

    @false_p.setter
    def false_p(self, false_p):
        """Sets the false_p of this Finding.


        :param false_p: The false_p of this Finding.  # noqa: E501
        :type: bool
        """

        self._false_p = false_p

    @property
    def duplicate(self):
        """Gets the duplicate of this Finding.  # noqa: E501


        :return: The duplicate of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._duplicate

    @duplicate.setter
    def duplicate(self, duplicate):
        """Sets the duplicate of this Finding.


        :param duplicate: The duplicate of this Finding.  # noqa: E501
        :type: bool
        """

        self._duplicate = duplicate

    @property
    def out_of_scope(self):
        """Gets the out_of_scope of this Finding.  # noqa: E501


        :return: The out_of_scope of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._out_of_scope

    @out_of_scope.setter
    def out_of_scope(self, out_of_scope):
        """Sets the out_of_scope of this Finding.


        :param out_of_scope: The out_of_scope of this Finding.  # noqa: E501
        :type: bool
        """

        self._out_of_scope = out_of_scope

    @property
    def under_review(self):
        """Gets the under_review of this Finding.  # noqa: E501


        :return: The under_review of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this Finding.


        :param under_review: The under_review of this Finding.  # noqa: E501
        :type: bool
        """

        self._under_review = under_review

    @property
    def under_defect_review(self):
        """Gets the under_defect_review of this Finding.  # noqa: E501


        :return: The under_defect_review of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._under_defect_review

    @under_defect_review.setter
    def under_defect_review(self, under_defect_review):
        """Sets the under_defect_review of this Finding.


        :param under_defect_review: The under_defect_review of this Finding.  # noqa: E501
        :type: bool
        """

        self._under_defect_review = under_defect_review

    @property
    def is_mitigated(self):
        """Gets the is_mitigated of this Finding.  # noqa: E501


        :return: The is_mitigated of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._is_mitigated

    @is_mitigated.setter
    def is_mitigated(self, is_mitigated):
        """Sets the is_mitigated of this Finding.


        :param is_mitigated: The is_mitigated of this Finding.  # noqa: E501
        :type: bool
        """

        self._is_mitigated = is_mitigated

    @property
    def thread_id(self):
        """Gets the thread_id of this Finding.  # noqa: E501


        :return: The thread_id of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this Finding.


        :param thread_id: The thread_id of this Finding.  # noqa: E501
        :type: int
        """

        self._thread_id = thread_id

    @property
    def mitigated(self):
        """Gets the mitigated of this Finding.  # noqa: E501


        :return: The mitigated of this Finding.  # noqa: E501
        :rtype: datetime
        """
        return self._mitigated

    @mitigated.setter
    def mitigated(self, mitigated):
        """Sets the mitigated of this Finding.


        :param mitigated: The mitigated of this Finding.  # noqa: E501
        :type: datetime
        """

        self._mitigated = mitigated

    @property
    def numerical_severity(self):
        """Gets the numerical_severity of this Finding.  # noqa: E501


        :return: The numerical_severity of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._numerical_severity

    @numerical_severity.setter
    def numerical_severity(self, numerical_severity):
        """Sets the numerical_severity of this Finding.


        :param numerical_severity: The numerical_severity of this Finding.  # noqa: E501
        :type: str
        """
        if numerical_severity is None:
            raise ValueError("Invalid value for `numerical_severity`, must not be `None`")  # noqa: E501
        if numerical_severity is not None and len(numerical_severity) > 4:
            raise ValueError("Invalid value for `numerical_severity`, length must be less than or equal to `4`")  # noqa: E501
        if numerical_severity is not None and len(numerical_severity) < 1:
            raise ValueError("Invalid value for `numerical_severity`, length must be greater than or equal to `1`")  # noqa: E501

        self._numerical_severity = numerical_severity

    @property
    def last_reviewed(self):
        """Gets the last_reviewed of this Finding.  # noqa: E501


        :return: The last_reviewed of this Finding.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reviewed

    @last_reviewed.setter
    def last_reviewed(self, last_reviewed):
        """Sets the last_reviewed of this Finding.


        :param last_reviewed: The last_reviewed of this Finding.  # noqa: E501
        :type: datetime
        """

        self._last_reviewed = last_reviewed

    @property
    def line_number(self):
        """Gets the line_number of this Finding.  # noqa: E501


        :return: The line_number of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this Finding.


        :param line_number: The line_number of this Finding.  # noqa: E501
        :type: str
        """
        if line_number is not None and len(line_number) < 1:
            raise ValueError("Invalid value for `line_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._line_number = line_number

    @property
    def sourcefilepath(self):
        """Gets the sourcefilepath of this Finding.  # noqa: E501


        :return: The sourcefilepath of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._sourcefilepath

    @sourcefilepath.setter
    def sourcefilepath(self, sourcefilepath):
        """Sets the sourcefilepath of this Finding.


        :param sourcefilepath: The sourcefilepath of this Finding.  # noqa: E501
        :type: str
        """
        if sourcefilepath is not None and len(sourcefilepath) < 1:
            raise ValueError("Invalid value for `sourcefilepath`, length must be greater than or equal to `1`")  # noqa: E501

        self._sourcefilepath = sourcefilepath

    @property
    def sourcefile(self):
        """Gets the sourcefile of this Finding.  # noqa: E501


        :return: The sourcefile of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._sourcefile

    @sourcefile.setter
    def sourcefile(self, sourcefile):
        """Sets the sourcefile of this Finding.


        :param sourcefile: The sourcefile of this Finding.  # noqa: E501
        :type: str
        """
        if sourcefile is not None and len(sourcefile) < 1:
            raise ValueError("Invalid value for `sourcefile`, length must be greater than or equal to `1`")  # noqa: E501

        self._sourcefile = sourcefile

    @property
    def param(self):
        """Gets the param of this Finding.  # noqa: E501


        :return: The param of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this Finding.


        :param param: The param of this Finding.  # noqa: E501
        :type: str
        """
        if param is not None and len(param) < 1:
            raise ValueError("Invalid value for `param`, length must be greater than or equal to `1`")  # noqa: E501

        self._param = param

    @property
    def payload(self):
        """Gets the payload of this Finding.  # noqa: E501


        :return: The payload of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Finding.


        :param payload: The payload of this Finding.  # noqa: E501
        :type: str
        """
        if payload is not None and len(payload) < 1:
            raise ValueError("Invalid value for `payload`, length must be greater than or equal to `1`")  # noqa: E501

        self._payload = payload

    @property
    def hash_code(self):
        """Gets the hash_code of this Finding.  # noqa: E501


        :return: The hash_code of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._hash_code

    @hash_code.setter
    def hash_code(self, hash_code):
        """Sets the hash_code of this Finding.


        :param hash_code: The hash_code of this Finding.  # noqa: E501
        :type: str
        """
        if hash_code is not None and len(hash_code) < 1:
            raise ValueError("Invalid value for `hash_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._hash_code = hash_code

    @property
    def line(self):
        """Gets the line of this Finding.  # noqa: E501

        Line number. For SAST, when source (start of the attack vector) and sink (end of the attack vector) information are available, put sink information here  # noqa: E501

        :return: The line of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this Finding.

        Line number. For SAST, when source (start of the attack vector) and sink (end of the attack vector) information are available, put sink information here  # noqa: E501

        :param line: The line of this Finding.  # noqa: E501
        :type: int
        """
        if line is not None and line > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `line`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if line is not None and line < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `line`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._line = line

    @property
    def file_path(self):
        """Gets the file_path of this Finding.  # noqa: E501

        File name with path. For SAST, when source (start of the attack vector) and sink (end of the attack vector) information are available, put sink information here  # noqa: E501

        :return: The file_path of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this Finding.

        File name with path. For SAST, when source (start of the attack vector) and sink (end of the attack vector) information are available, put sink information here  # noqa: E501

        :param file_path: The file_path of this Finding.  # noqa: E501
        :type: str
        """
        if file_path is not None and len(file_path) > 4000:
            raise ValueError("Invalid value for `file_path`, length must be less than or equal to `4000`")  # noqa: E501

        self._file_path = file_path

    @property
    def component_name(self):
        """Gets the component_name of this Finding.  # noqa: E501

        Name of the component containing the finding.   # noqa: E501

        :return: The component_name of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this Finding.

        Name of the component containing the finding.   # noqa: E501

        :param component_name: The component_name of this Finding.  # noqa: E501
        :type: str
        """
        if component_name is not None and len(component_name) > 200:
            raise ValueError("Invalid value for `component_name`, length must be less than or equal to `200`")  # noqa: E501

        self._component_name = component_name

    @property
    def component_version(self):
        """Gets the component_version of this Finding.  # noqa: E501

        Version of the component.  # noqa: E501

        :return: The component_version of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._component_version

    @component_version.setter
    def component_version(self, component_version):
        """Sets the component_version of this Finding.

        Version of the component.  # noqa: E501

        :param component_version: The component_version of this Finding.  # noqa: E501
        :type: str
        """
        if component_version is not None and len(component_version) > 100:
            raise ValueError("Invalid value for `component_version`, length must be less than or equal to `100`")  # noqa: E501

        self._component_version = component_version

    @property
    def static_finding(self):
        """Gets the static_finding of this Finding.  # noqa: E501


        :return: The static_finding of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._static_finding

    @static_finding.setter
    def static_finding(self, static_finding):
        """Sets the static_finding of this Finding.


        :param static_finding: The static_finding of this Finding.  # noqa: E501
        :type: bool
        """

        self._static_finding = static_finding

    @property
    def dynamic_finding(self):
        """Gets the dynamic_finding of this Finding.  # noqa: E501


        :return: The dynamic_finding of this Finding.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_finding

    @dynamic_finding.setter
    def dynamic_finding(self, dynamic_finding):
        """Sets the dynamic_finding of this Finding.


        :param dynamic_finding: The dynamic_finding of this Finding.  # noqa: E501
        :type: bool
        """

        self._dynamic_finding = dynamic_finding

    @property
    def created(self):
        """Gets the created of this Finding.  # noqa: E501


        :return: The created of this Finding.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Finding.


        :param created: The created of this Finding.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def jira_creation(self):
        """Gets the jira_creation of this Finding.  # noqa: E501


        :return: The jira_creation of this Finding.  # noqa: E501
        :rtype: datetime
        """
        return self._jira_creation

    @jira_creation.setter
    def jira_creation(self, jira_creation):
        """Sets the jira_creation of this Finding.


        :param jira_creation: The jira_creation of this Finding.  # noqa: E501
        :type: datetime
        """

        self._jira_creation = jira_creation

    @property
    def jira_change(self):
        """Gets the jira_change of this Finding.  # noqa: E501


        :return: The jira_change of this Finding.  # noqa: E501
        :rtype: datetime
        """
        return self._jira_change

    @jira_change.setter
    def jira_change(self, jira_change):
        """Sets the jira_change of this Finding.


        :param jira_change: The jira_change of this Finding.  # noqa: E501
        :type: datetime
        """

        self._jira_change = jira_change

    @property
    def scanner_confidence(self):
        """Gets the scanner_confidence of this Finding.  # noqa: E501

        Confidence level of vulnerability which is supplied by the scannner.  # noqa: E501

        :return: The scanner_confidence of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._scanner_confidence

    @scanner_confidence.setter
    def scanner_confidence(self, scanner_confidence):
        """Sets the scanner_confidence of this Finding.

        Confidence level of vulnerability which is supplied by the scannner.  # noqa: E501

        :param scanner_confidence: The scanner_confidence of this Finding.  # noqa: E501
        :type: int
        """

        self._scanner_confidence = scanner_confidence

    @property
    def unique_id_from_tool(self):
        """Gets the unique_id_from_tool of this Finding.  # noqa: E501

        Vulnerability technical id from the source tool. Allows to track unique vulnerabilities  # noqa: E501

        :return: The unique_id_from_tool of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._unique_id_from_tool

    @unique_id_from_tool.setter
    def unique_id_from_tool(self, unique_id_from_tool):
        """Sets the unique_id_from_tool of this Finding.

        Vulnerability technical id from the source tool. Allows to track unique vulnerabilities  # noqa: E501

        :param unique_id_from_tool: The unique_id_from_tool of this Finding.  # noqa: E501
        :type: str
        """
        if unique_id_from_tool is not None and len(unique_id_from_tool) > 500:
            raise ValueError("Invalid value for `unique_id_from_tool`, length must be less than or equal to `500`")  # noqa: E501

        self._unique_id_from_tool = unique_id_from_tool

    @property
    def sast_source_object(self):
        """Gets the sast_source_object of this Finding.  # noqa: E501

        Source object (variable, function...) of the attack vector  # noqa: E501

        :return: The sast_source_object of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._sast_source_object

    @sast_source_object.setter
    def sast_source_object(self, sast_source_object):
        """Sets the sast_source_object of this Finding.

        Source object (variable, function...) of the attack vector  # noqa: E501

        :param sast_source_object: The sast_source_object of this Finding.  # noqa: E501
        :type: str
        """
        if sast_source_object is not None and len(sast_source_object) > 500:
            raise ValueError("Invalid value for `sast_source_object`, length must be less than or equal to `500`")  # noqa: E501

        self._sast_source_object = sast_source_object

    @property
    def sast_sink_object(self):
        """Gets the sast_sink_object of this Finding.  # noqa: E501

        Sink object (variable, function...) of the attack vector  # noqa: E501

        :return: The sast_sink_object of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._sast_sink_object

    @sast_sink_object.setter
    def sast_sink_object(self, sast_sink_object):
        """Sets the sast_sink_object of this Finding.

        Sink object (variable, function...) of the attack vector  # noqa: E501

        :param sast_sink_object: The sast_sink_object of this Finding.  # noqa: E501
        :type: str
        """
        if sast_sink_object is not None and len(sast_sink_object) > 500:
            raise ValueError("Invalid value for `sast_sink_object`, length must be less than or equal to `500`")  # noqa: E501

        self._sast_sink_object = sast_sink_object

    @property
    def sast_source_line(self):
        """Gets the sast_source_line of this Finding.  # noqa: E501

        Source line number of the attack vector  # noqa: E501

        :return: The sast_source_line of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._sast_source_line

    @sast_source_line.setter
    def sast_source_line(self, sast_source_line):
        """Sets the sast_source_line of this Finding.

        Source line number of the attack vector  # noqa: E501

        :param sast_source_line: The sast_source_line of this Finding.  # noqa: E501
        :type: int
        """
        if sast_source_line is not None and sast_source_line > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `sast_source_line`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if sast_source_line is not None and sast_source_line < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `sast_source_line`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._sast_source_line = sast_source_line

    @property
    def sast_source_file_path(self):
        """Gets the sast_source_file_path of this Finding.  # noqa: E501

        Source filepath of the attack vector  # noqa: E501

        :return: The sast_source_file_path of this Finding.  # noqa: E501
        :rtype: str
        """
        return self._sast_source_file_path

    @sast_source_file_path.setter
    def sast_source_file_path(self, sast_source_file_path):
        """Sets the sast_source_file_path of this Finding.

        Source filepath of the attack vector  # noqa: E501

        :param sast_source_file_path: The sast_source_file_path of this Finding.  # noqa: E501
        :type: str
        """
        if sast_source_file_path is not None and len(sast_source_file_path) > 4000:
            raise ValueError("Invalid value for `sast_source_file_path`, length must be less than or equal to `4000`")  # noqa: E501

        self._sast_source_file_path = sast_source_file_path

    @property
    def nb_occurences(self):
        """Gets the nb_occurences of this Finding.  # noqa: E501

        Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner  # noqa: E501

        :return: The nb_occurences of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._nb_occurences

    @nb_occurences.setter
    def nb_occurences(self, nb_occurences):
        """Sets the nb_occurences of this Finding.

        Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner  # noqa: E501

        :param nb_occurences: The nb_occurences of this Finding.  # noqa: E501
        :type: int
        """
        if nb_occurences is not None and nb_occurences > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `nb_occurences`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if nb_occurences is not None and nb_occurences < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `nb_occurences`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._nb_occurences = nb_occurences

    @property
    def test(self):
        """Gets the test of this Finding.  # noqa: E501


        :return: The test of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Finding.


        :param test: The test of this Finding.  # noqa: E501
        :type: int
        """

        self._test = test

    @property
    def duplicate_finding(self):
        """Gets the duplicate_finding of this Finding.  # noqa: E501


        :return: The duplicate_finding of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._duplicate_finding

    @duplicate_finding.setter
    def duplicate_finding(self, duplicate_finding):
        """Sets the duplicate_finding of this Finding.


        :param duplicate_finding: The duplicate_finding of this Finding.  # noqa: E501
        :type: int
        """

        self._duplicate_finding = duplicate_finding

    @property
    def review_requested_by(self):
        """Gets the review_requested_by of this Finding.  # noqa: E501


        :return: The review_requested_by of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._review_requested_by

    @review_requested_by.setter
    def review_requested_by(self, review_requested_by):
        """Sets the review_requested_by of this Finding.


        :param review_requested_by: The review_requested_by of this Finding.  # noqa: E501
        :type: int
        """

        self._review_requested_by = review_requested_by

    @property
    def defect_review_requested_by(self):
        """Gets the defect_review_requested_by of this Finding.  # noqa: E501


        :return: The defect_review_requested_by of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._defect_review_requested_by

    @defect_review_requested_by.setter
    def defect_review_requested_by(self, defect_review_requested_by):
        """Sets the defect_review_requested_by of this Finding.


        :param defect_review_requested_by: The defect_review_requested_by of this Finding.  # noqa: E501
        :type: int
        """

        self._defect_review_requested_by = defect_review_requested_by

    @property
    def mitigated_by(self):
        """Gets the mitigated_by of this Finding.  # noqa: E501


        :return: The mitigated_by of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._mitigated_by

    @mitigated_by.setter
    def mitigated_by(self, mitigated_by):
        """Sets the mitigated_by of this Finding.


        :param mitigated_by: The mitigated_by of this Finding.  # noqa: E501
        :type: int
        """

        self._mitigated_by = mitigated_by

    @property
    def reporter(self):
        """Gets the reporter of this Finding.  # noqa: E501


        :return: The reporter of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this Finding.


        :param reporter: The reporter of this Finding.  # noqa: E501
        :type: int
        """

        self._reporter = reporter

    @property
    def last_reviewed_by(self):
        """Gets the last_reviewed_by of this Finding.  # noqa: E501


        :return: The last_reviewed_by of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._last_reviewed_by

    @last_reviewed_by.setter
    def last_reviewed_by(self, last_reviewed_by):
        """Sets the last_reviewed_by of this Finding.


        :param last_reviewed_by: The last_reviewed_by of this Finding.  # noqa: E501
        :type: int
        """

        self._last_reviewed_by = last_reviewed_by

    @property
    def sonarqube_issue(self):
        """Gets the sonarqube_issue of this Finding.  # noqa: E501

        SonarQube issue  # noqa: E501

        :return: The sonarqube_issue of this Finding.  # noqa: E501
        :rtype: int
        """
        return self._sonarqube_issue

    @sonarqube_issue.setter
    def sonarqube_issue(self, sonarqube_issue):
        """Sets the sonarqube_issue of this Finding.

        SonarQube issue  # noqa: E501

        :param sonarqube_issue: The sonarqube_issue of this Finding.  # noqa: E501
        :type: int
        """

        self._sonarqube_issue = sonarqube_issue

    @property
    def endpoints(self):
        """Gets the endpoints of this Finding.  # noqa: E501


        :return: The endpoints of this Finding.  # noqa: E501
        :rtype: list[int]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this Finding.


        :param endpoints: The endpoints of this Finding.  # noqa: E501
        :type: list[int]
        """

        self._endpoints = endpoints

    @property
    def reviewers(self):
        """Gets the reviewers of this Finding.  # noqa: E501


        :return: The reviewers of this Finding.  # noqa: E501
        :rtype: list[int]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this Finding.


        :param reviewers: The reviewers of this Finding.  # noqa: E501
        :type: list[int]
        """

        self._reviewers = reviewers

    @property
    def notes(self):
        """Gets the notes of this Finding.  # noqa: E501


        :return: The notes of this Finding.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Finding.


        :param notes: The notes of this Finding.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def found_by(self):
        """Gets the found_by of this Finding.  # noqa: E501


        :return: The found_by of this Finding.  # noqa: E501
        :rtype: list[int]
        """
        return self._found_by

    @found_by.setter
    def found_by(self, found_by):
        """Sets the found_by of this Finding.


        :param found_by: The found_by of this Finding.  # noqa: E501
        :type: list[int]
        """

        self._found_by = found_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Finding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Finding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
