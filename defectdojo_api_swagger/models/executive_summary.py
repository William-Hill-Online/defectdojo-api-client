# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExecutiveSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'engagement_name': 'str',
        'engagement_target_start': 'date',
        'engagement_target_end': 'date',
        'test_type_name': 'str',
        'test_target_start': 'datetime',
        'test_target_end': 'datetime',
        'test_environment_name': 'str',
        'test_strategy_ref': 'str',
        'total_findings': 'int'
    }

    attribute_map = {
        'engagement_name': 'engagement_name',
        'engagement_target_start': 'engagement_target_start',
        'engagement_target_end': 'engagement_target_end',
        'test_type_name': 'test_type_name',
        'test_target_start': 'test_target_start',
        'test_target_end': 'test_target_end',
        'test_environment_name': 'test_environment_name',
        'test_strategy_ref': 'test_strategy_ref',
        'total_findings': 'total_findings'
    }

    def __init__(self, engagement_name=None, engagement_target_start=None, engagement_target_end=None, test_type_name=None, test_target_start=None, test_target_end=None, test_environment_name=None, test_strategy_ref=None, total_findings=None):  # noqa: E501
        """ExecutiveSummary - a model defined in Swagger"""  # noqa: E501

        self._engagement_name = None
        self._engagement_target_start = None
        self._engagement_target_end = None
        self._test_type_name = None
        self._test_target_start = None
        self._test_target_end = None
        self._test_environment_name = None
        self._test_strategy_ref = None
        self._total_findings = None
        self.discriminator = None

        self.engagement_name = engagement_name
        self.engagement_target_start = engagement_target_start
        self.engagement_target_end = engagement_target_end
        self.test_type_name = test_type_name
        self.test_target_start = test_target_start
        self.test_target_end = test_target_end
        self.test_environment_name = test_environment_name
        self.test_strategy_ref = test_strategy_ref
        self.total_findings = total_findings

    @property
    def engagement_name(self):
        """Gets the engagement_name of this ExecutiveSummary.  # noqa: E501


        :return: The engagement_name of this ExecutiveSummary.  # noqa: E501
        :rtype: str
        """
        return self._engagement_name

    @engagement_name.setter
    def engagement_name(self, engagement_name):
        """Sets the engagement_name of this ExecutiveSummary.


        :param engagement_name: The engagement_name of this ExecutiveSummary.  # noqa: E501
        :type: str
        """
        if engagement_name is None:
            raise ValueError("Invalid value for `engagement_name`, must not be `None`")  # noqa: E501
        if engagement_name is not None and len(engagement_name) > 200:
            raise ValueError("Invalid value for `engagement_name`, length must be less than or equal to `200`")  # noqa: E501
        if engagement_name is not None and len(engagement_name) < 1:
            raise ValueError("Invalid value for `engagement_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._engagement_name = engagement_name

    @property
    def engagement_target_start(self):
        """Gets the engagement_target_start of this ExecutiveSummary.  # noqa: E501


        :return: The engagement_target_start of this ExecutiveSummary.  # noqa: E501
        :rtype: date
        """
        return self._engagement_target_start

    @engagement_target_start.setter
    def engagement_target_start(self, engagement_target_start):
        """Sets the engagement_target_start of this ExecutiveSummary.


        :param engagement_target_start: The engagement_target_start of this ExecutiveSummary.  # noqa: E501
        :type: date
        """
        if engagement_target_start is None:
            raise ValueError("Invalid value for `engagement_target_start`, must not be `None`")  # noqa: E501

        self._engagement_target_start = engagement_target_start

    @property
    def engagement_target_end(self):
        """Gets the engagement_target_end of this ExecutiveSummary.  # noqa: E501


        :return: The engagement_target_end of this ExecutiveSummary.  # noqa: E501
        :rtype: date
        """
        return self._engagement_target_end

    @engagement_target_end.setter
    def engagement_target_end(self, engagement_target_end):
        """Sets the engagement_target_end of this ExecutiveSummary.


        :param engagement_target_end: The engagement_target_end of this ExecutiveSummary.  # noqa: E501
        :type: date
        """
        if engagement_target_end is None:
            raise ValueError("Invalid value for `engagement_target_end`, must not be `None`")  # noqa: E501

        self._engagement_target_end = engagement_target_end

    @property
    def test_type_name(self):
        """Gets the test_type_name of this ExecutiveSummary.  # noqa: E501


        :return: The test_type_name of this ExecutiveSummary.  # noqa: E501
        :rtype: str
        """
        return self._test_type_name

    @test_type_name.setter
    def test_type_name(self, test_type_name):
        """Sets the test_type_name of this ExecutiveSummary.


        :param test_type_name: The test_type_name of this ExecutiveSummary.  # noqa: E501
        :type: str
        """
        if test_type_name is None:
            raise ValueError("Invalid value for `test_type_name`, must not be `None`")  # noqa: E501
        if test_type_name is not None and len(test_type_name) > 200:
            raise ValueError("Invalid value for `test_type_name`, length must be less than or equal to `200`")  # noqa: E501
        if test_type_name is not None and len(test_type_name) < 1:
            raise ValueError("Invalid value for `test_type_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._test_type_name = test_type_name

    @property
    def test_target_start(self):
        """Gets the test_target_start of this ExecutiveSummary.  # noqa: E501


        :return: The test_target_start of this ExecutiveSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._test_target_start

    @test_target_start.setter
    def test_target_start(self, test_target_start):
        """Sets the test_target_start of this ExecutiveSummary.


        :param test_target_start: The test_target_start of this ExecutiveSummary.  # noqa: E501
        :type: datetime
        """
        if test_target_start is None:
            raise ValueError("Invalid value for `test_target_start`, must not be `None`")  # noqa: E501

        self._test_target_start = test_target_start

    @property
    def test_target_end(self):
        """Gets the test_target_end of this ExecutiveSummary.  # noqa: E501


        :return: The test_target_end of this ExecutiveSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._test_target_end

    @test_target_end.setter
    def test_target_end(self, test_target_end):
        """Sets the test_target_end of this ExecutiveSummary.


        :param test_target_end: The test_target_end of this ExecutiveSummary.  # noqa: E501
        :type: datetime
        """
        if test_target_end is None:
            raise ValueError("Invalid value for `test_target_end`, must not be `None`")  # noqa: E501

        self._test_target_end = test_target_end

    @property
    def test_environment_name(self):
        """Gets the test_environment_name of this ExecutiveSummary.  # noqa: E501


        :return: The test_environment_name of this ExecutiveSummary.  # noqa: E501
        :rtype: str
        """
        return self._test_environment_name

    @test_environment_name.setter
    def test_environment_name(self, test_environment_name):
        """Sets the test_environment_name of this ExecutiveSummary.


        :param test_environment_name: The test_environment_name of this ExecutiveSummary.  # noqa: E501
        :type: str
        """
        if test_environment_name is None:
            raise ValueError("Invalid value for `test_environment_name`, must not be `None`")  # noqa: E501
        if test_environment_name is not None and len(test_environment_name) > 200:
            raise ValueError("Invalid value for `test_environment_name`, length must be less than or equal to `200`")  # noqa: E501
        if test_environment_name is not None and len(test_environment_name) < 1:
            raise ValueError("Invalid value for `test_environment_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._test_environment_name = test_environment_name

    @property
    def test_strategy_ref(self):
        """Gets the test_strategy_ref of this ExecutiveSummary.  # noqa: E501


        :return: The test_strategy_ref of this ExecutiveSummary.  # noqa: E501
        :rtype: str
        """
        return self._test_strategy_ref

    @test_strategy_ref.setter
    def test_strategy_ref(self, test_strategy_ref):
        """Sets the test_strategy_ref of this ExecutiveSummary.


        :param test_strategy_ref: The test_strategy_ref of this ExecutiveSummary.  # noqa: E501
        :type: str
        """
        if test_strategy_ref is None:
            raise ValueError("Invalid value for `test_strategy_ref`, must not be `None`")  # noqa: E501
        if test_strategy_ref is not None and len(test_strategy_ref) > 200:
            raise ValueError("Invalid value for `test_strategy_ref`, length must be less than or equal to `200`")  # noqa: E501

        self._test_strategy_ref = test_strategy_ref

    @property
    def total_findings(self):
        """Gets the total_findings of this ExecutiveSummary.  # noqa: E501


        :return: The total_findings of this ExecutiveSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_findings

    @total_findings.setter
    def total_findings(self, total_findings):
        """Sets the total_findings of this ExecutiveSummary.


        :param total_findings: The total_findings of this ExecutiveSummary.  # noqa: E501
        :type: int
        """
        if total_findings is None:
            raise ValueError("Invalid value for `total_findings`, must not be `None`")  # noqa: E501

        self._total_findings = total_findings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutiveSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutiveSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
