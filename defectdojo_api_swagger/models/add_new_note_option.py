# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddNewNoteOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry': 'str',
        'private': 'bool',
        'note_type': 'int'
    }

    attribute_map = {
        'entry': 'entry',
        'private': 'private',
        'note_type': 'note_type'
    }

    def __init__(self, entry=None, private=None, note_type=None):  # noqa: E501
        """AddNewNoteOption - a model defined in Swagger"""  # noqa: E501

        self._entry = None
        self._private = None
        self._note_type = None
        self.discriminator = None

        self.entry = entry
        if private is not None:
            self.private = private
        if note_type is not None:
            self.note_type = note_type

    @property
    def entry(self):
        """Gets the entry of this AddNewNoteOption.  # noqa: E501


        :return: The entry of this AddNewNoteOption.  # noqa: E501
        :rtype: str
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this AddNewNoteOption.


        :param entry: The entry of this AddNewNoteOption.  # noqa: E501
        :type: str
        """
        if entry is None:
            raise ValueError("Invalid value for `entry`, must not be `None`")  # noqa: E501
        if entry is not None and len(entry) < 1:
            raise ValueError("Invalid value for `entry`, length must be greater than or equal to `1`")  # noqa: E501

        self._entry = entry

    @property
    def private(self):
        """Gets the private of this AddNewNoteOption.  # noqa: E501


        :return: The private of this AddNewNoteOption.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this AddNewNoteOption.


        :param private: The private of this AddNewNoteOption.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def note_type(self):
        """Gets the note_type of this AddNewNoteOption.  # noqa: E501


        :return: The note_type of this AddNewNoteOption.  # noqa: E501
        :rtype: int
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this AddNewNoteOption.


        :param note_type: The note_type of this AddNewNoteOption.  # noqa: E501
        :type: int
        """

        self._note_type = note_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddNewNoteOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddNewNoteOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
