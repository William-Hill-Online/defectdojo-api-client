# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_auditlog': 'bool',
        'enable_deduplication': 'bool',
        'delete_dupulicates': 'bool',
        'max_dupes': 'int',
        'enable_jira': 'bool',
        'enable_benchmark': 'bool',
        'enable_product_grade': 'bool',
        'enable_finding_sla': 'bool'
    }

    attribute_map = {
        'enable_auditlog': 'enable_auditlog',
        'enable_deduplication': 'enable_deduplication',
        'delete_dupulicates': 'delete_dupulicates',
        'max_dupes': 'max_dupes',
        'enable_jira': 'enable_jira',
        'enable_benchmark': 'enable_benchmark',
        'enable_product_grade': 'enable_product_grade',
        'enable_finding_sla': 'enable_finding_sla'
    }

    def __init__(self, enable_auditlog=True, enable_deduplication=False, delete_dupulicates=False, max_dupes=None, enable_jira=False, enable_benchmark=True, enable_product_grade=False, enable_finding_sla=True):  # noqa: E501
        """SystemSettings - a model defined in Swagger"""  # noqa: E501

        self._enable_auditlog = None
        self._enable_deduplication = None
        self._delete_dupulicates = None
        self._max_dupes = None
        self._enable_jira = None
        self._enable_benchmark = None
        self._enable_product_grade = None
        self._enable_finding_sla = None
        self.discriminator = None

        if enable_auditlog is not None:
            self.enable_auditlog = enable_auditlog
        if enable_deduplication is not None:
            self.enable_deduplication = enable_deduplication
        if delete_dupulicates is not None:
            self.delete_dupulicates = delete_dupulicates
        if max_dupes is not None:
            self.max_dupes = max_dupes
        if enable_jira is not None:
            self.enable_jira = enable_jira
        if enable_benchmark is not None:
            self.enable_benchmark = enable_benchmark
        if enable_product_grade is not None:
            self.enable_product_grade = enable_product_grade
        if enable_finding_sla is not None:
            self.enable_finding_sla = enable_finding_sla

    @property
    def enable_auditlog(self):
        """Gets the enable_auditlog of this SystemSettings.  # noqa: E501


        :return: The enable_auditlog of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auditlog

    @enable_auditlog.setter
    def enable_auditlog(self, enable_auditlog):
        """Sets the enable_auditlog of this SystemSettings.


        :param enable_auditlog: The enable_auditlog of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_auditlog = enable_auditlog

    @property
    def enable_deduplication(self):
        """Gets the enable_deduplication of this SystemSettings.  # noqa: E501


        :return: The enable_deduplication of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_deduplication

    @enable_deduplication.setter
    def enable_deduplication(self, enable_deduplication):
        """Sets the enable_deduplication of this SystemSettings.


        :param enable_deduplication: The enable_deduplication of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_deduplication = enable_deduplication

    @property
    def delete_dupulicates(self):
        """Gets the delete_dupulicates of this SystemSettings.  # noqa: E501


        :return: The delete_dupulicates of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._delete_dupulicates

    @delete_dupulicates.setter
    def delete_dupulicates(self, delete_dupulicates):
        """Sets the delete_dupulicates of this SystemSettings.


        :param delete_dupulicates: The delete_dupulicates of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._delete_dupulicates = delete_dupulicates

    @property
    def max_dupes(self):
        """Gets the max_dupes of this SystemSettings.  # noqa: E501


        :return: The max_dupes of this SystemSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_dupes

    @max_dupes.setter
    def max_dupes(self, max_dupes):
        """Sets the max_dupes of this SystemSettings.


        :param max_dupes: The max_dupes of this SystemSettings.  # noqa: E501
        :type: int
        """

        self._max_dupes = max_dupes

    @property
    def enable_jira(self):
        """Gets the enable_jira of this SystemSettings.  # noqa: E501


        :return: The enable_jira of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_jira

    @enable_jira.setter
    def enable_jira(self, enable_jira):
        """Sets the enable_jira of this SystemSettings.


        :param enable_jira: The enable_jira of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_jira = enable_jira

    @property
    def enable_benchmark(self):
        """Gets the enable_benchmark of this SystemSettings.  # noqa: E501


        :return: The enable_benchmark of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_benchmark

    @enable_benchmark.setter
    def enable_benchmark(self, enable_benchmark):
        """Sets the enable_benchmark of this SystemSettings.


        :param enable_benchmark: The enable_benchmark of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_benchmark = enable_benchmark

    @property
    def enable_product_grade(self):
        """Gets the enable_product_grade of this SystemSettings.  # noqa: E501


        :return: The enable_product_grade of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_product_grade

    @enable_product_grade.setter
    def enable_product_grade(self, enable_product_grade):
        """Sets the enable_product_grade of this SystemSettings.


        :param enable_product_grade: The enable_product_grade of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_product_grade = enable_product_grade

    @property
    def enable_finding_sla(self):
        """Gets the enable_finding_sla of this SystemSettings.  # noqa: E501


        :return: The enable_finding_sla of this SystemSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_finding_sla

    @enable_finding_sla.setter
    def enable_finding_sla(self, enable_finding_sla):
        """Sets the enable_finding_sla of this SystemSettings.


        :param enable_finding_sla: The enable_finding_sla of this SystemSettings.  # noqa: E501
        :type: bool
        """

        self._enable_finding_sla = enable_finding_sla

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
