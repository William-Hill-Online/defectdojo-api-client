# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NoteHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'current_editor': 'User',
        'data': 'str',
        'time': 'datetime',
        'note_type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'current_editor': 'current_editor',
        'data': 'data',
        'time': 'time',
        'note_type': 'note_type'
    }

    def __init__(self, id=None, current_editor=None, data=None, time=None, note_type=None):  # noqa: E501
        """NoteHistory - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._current_editor = None
        self._data = None
        self._time = None
        self._note_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if current_editor is not None:
            self.current_editor = current_editor
        self.data = data
        if time is not None:
            self.time = time
        if note_type is not None:
            self.note_type = note_type

    @property
    def id(self):
        """Gets the id of this NoteHistory.  # noqa: E501


        :return: The id of this NoteHistory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteHistory.


        :param id: The id of this NoteHistory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def current_editor(self):
        """Gets the current_editor of this NoteHistory.  # noqa: E501


        :return: The current_editor of this NoteHistory.  # noqa: E501
        :rtype: User
        """
        return self._current_editor

    @current_editor.setter
    def current_editor(self, current_editor):
        """Sets the current_editor of this NoteHistory.


        :param current_editor: The current_editor of this NoteHistory.  # noqa: E501
        :type: User
        """

        self._current_editor = current_editor

    @property
    def data(self):
        """Gets the data of this NoteHistory.  # noqa: E501


        :return: The data of this NoteHistory.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this NoteHistory.


        :param data: The data of this NoteHistory.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501
        if data is not None and len(data) < 1:
            raise ValueError("Invalid value for `data`, length must be greater than or equal to `1`")  # noqa: E501

        self._data = data

    @property
    def time(self):
        """Gets the time of this NoteHistory.  # noqa: E501


        :return: The time of this NoteHistory.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NoteHistory.


        :param time: The time of this NoteHistory.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def note_type(self):
        """Gets the note_type of this NoteHistory.  # noqa: E501


        :return: The note_type of this NoteHistory.  # noqa: E501
        :rtype: int
        """
        return self._note_type

    @note_type.setter
    def note_type(self, note_type):
        """Sets the note_type of this NoteHistory.


        :param note_type: The note_type of this NoteHistory.  # noqa: E501
        :type: int
        """

        self._note_type = note_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
