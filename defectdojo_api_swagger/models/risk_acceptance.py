# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RiskAcceptance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'path': 'str',
        'expiration_date': 'datetime',
        'accepted_by': 'str',
        'compensating_control': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'reporter': 'int',
        'accepted_findings': 'list[int]',
        'notes': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'path': 'path',
        'expiration_date': 'expiration_date',
        'accepted_by': 'accepted_by',
        'compensating_control': 'compensating_control',
        'created': 'created',
        'updated': 'updated',
        'reporter': 'reporter',
        'accepted_findings': 'accepted_findings',
        'notes': 'notes'
    }

    def __init__(self, id=None, path=None, expiration_date=None, accepted_by=None, compensating_control=None, created=None, updated=None, reporter=None, accepted_findings=None, notes=None):  # noqa: E501
        """RiskAcceptance - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._path = None
        self._expiration_date = None
        self._accepted_by = None
        self._compensating_control = None
        self._created = None
        self._updated = None
        self._reporter = None
        self._accepted_findings = None
        self._notes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if accepted_by is not None:
            self.accepted_by = accepted_by
        if compensating_control is not None:
            self.compensating_control = compensating_control
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if reporter is not None:
            self.reporter = reporter
        self.accepted_findings = accepted_findings
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this RiskAcceptance.  # noqa: E501


        :return: The id of this RiskAcceptance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RiskAcceptance.


        :param id: The id of this RiskAcceptance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this RiskAcceptance.  # noqa: E501


        :return: The path of this RiskAcceptance.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RiskAcceptance.


        :param path: The path of this RiskAcceptance.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def expiration_date(self):
        """Gets the expiration_date of this RiskAcceptance.  # noqa: E501


        :return: The expiration_date of this RiskAcceptance.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this RiskAcceptance.


        :param expiration_date: The expiration_date of this RiskAcceptance.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def accepted_by(self):
        """Gets the accepted_by of this RiskAcceptance.  # noqa: E501

        The entity or person that accepts the risk.  # noqa: E501

        :return: The accepted_by of this RiskAcceptance.  # noqa: E501
        :rtype: str
        """
        return self._accepted_by

    @accepted_by.setter
    def accepted_by(self, accepted_by):
        """Sets the accepted_by of this RiskAcceptance.

        The entity or person that accepts the risk.  # noqa: E501

        :param accepted_by: The accepted_by of this RiskAcceptance.  # noqa: E501
        :type: str
        """
        if accepted_by is not None and len(accepted_by) > 200:
            raise ValueError("Invalid value for `accepted_by`, length must be less than or equal to `200`")  # noqa: E501

        self._accepted_by = accepted_by

    @property
    def compensating_control(self):
        """Gets the compensating_control of this RiskAcceptance.  # noqa: E501

        If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).  # noqa: E501

        :return: The compensating_control of this RiskAcceptance.  # noqa: E501
        :rtype: str
        """
        return self._compensating_control

    @compensating_control.setter
    def compensating_control(self, compensating_control):
        """Sets the compensating_control of this RiskAcceptance.

        If a compensating control exists to mitigate the finding or reduce risk, then list the compensating control(s).  # noqa: E501

        :param compensating_control: The compensating_control of this RiskAcceptance.  # noqa: E501
        :type: str
        """

        self._compensating_control = compensating_control

    @property
    def created(self):
        """Gets the created of this RiskAcceptance.  # noqa: E501


        :return: The created of this RiskAcceptance.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RiskAcceptance.


        :param created: The created of this RiskAcceptance.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this RiskAcceptance.  # noqa: E501


        :return: The updated of this RiskAcceptance.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RiskAcceptance.


        :param updated: The updated of this RiskAcceptance.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def reporter(self):
        """Gets the reporter of this RiskAcceptance.  # noqa: E501


        :return: The reporter of this RiskAcceptance.  # noqa: E501
        :rtype: int
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this RiskAcceptance.


        :param reporter: The reporter of this RiskAcceptance.  # noqa: E501
        :type: int
        """

        self._reporter = reporter

    @property
    def accepted_findings(self):
        """Gets the accepted_findings of this RiskAcceptance.  # noqa: E501


        :return: The accepted_findings of this RiskAcceptance.  # noqa: E501
        :rtype: list[int]
        """
        return self._accepted_findings

    @accepted_findings.setter
    def accepted_findings(self, accepted_findings):
        """Sets the accepted_findings of this RiskAcceptance.


        :param accepted_findings: The accepted_findings of this RiskAcceptance.  # noqa: E501
        :type: list[int]
        """
        if accepted_findings is None:
            raise ValueError("Invalid value for `accepted_findings`, must not be `None`")  # noqa: E501

        self._accepted_findings = accepted_findings

    @property
    def notes(self):
        """Gets the notes of this RiskAcceptance.  # noqa: E501


        :return: The notes of this RiskAcceptance.  # noqa: E501
        :rtype: list[int]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RiskAcceptance.


        :param notes: The notes of this RiskAcceptance.  # noqa: E501
        :type: list[int]
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskAcceptance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskAcceptance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
