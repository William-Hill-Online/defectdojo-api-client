# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Meta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'product': 'int',
        'endpoint': 'int',
        'name': 'str',
        'value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'product': 'product',
        'endpoint': 'endpoint',
        'name': 'name',
        'value': 'value'
    }

    def __init__(self, id=None, product=None, endpoint=None, name=None, value=None):  # noqa: E501
        """Meta - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._product = None
        self._endpoint = None
        self._name = None
        self._value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if product is not None:
            self.product = product
        if endpoint is not None:
            self.endpoint = endpoint
        self.name = name
        self.value = value

    @property
    def id(self):
        """Gets the id of this Meta.  # noqa: E501


        :return: The id of this Meta.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Meta.


        :param id: The id of this Meta.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this Meta.  # noqa: E501


        :return: The product of this Meta.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Meta.


        :param product: The product of this Meta.  # noqa: E501
        :type: int
        """

        self._product = product

    @property
    def endpoint(self):
        """Gets the endpoint of this Meta.  # noqa: E501


        :return: The endpoint of this Meta.  # noqa: E501
        :rtype: int
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Meta.


        :param endpoint: The endpoint of this Meta.  # noqa: E501
        :type: int
        """

        self._endpoint = endpoint

    @property
    def name(self):
        """Gets the name of this Meta.  # noqa: E501


        :return: The name of this Meta.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Meta.


        :param name: The name of this Meta.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 120:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `120`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this Meta.  # noqa: E501


        :return: The value of this Meta.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Meta.


        :param value: The value of this Meta.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 300:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `300`")  # noqa: E501
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Meta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Meta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
