# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StubFinding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        '_date': 'date',
        'severity': 'str',
        'description': 'str',
        'test': 'int',
        'reporter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        '_date': 'date',
        'severity': 'severity',
        'description': 'description',
        'test': 'test',
        'reporter': 'reporter'
    }

    def __init__(self, id=None, title=None, _date=None, severity=None, description=None, test=None, reporter=None):  # noqa: E501
        """StubFinding - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self.__date = None
        self._severity = None
        self._description = None
        self._test = None
        self._reporter = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.title = title
        if _date is not None:
            self._date = _date
        if severity is not None:
            self.severity = severity
        if description is not None:
            self.description = description
        if test is not None:
            self.test = test
        if reporter is not None:
            self.reporter = reporter

    @property
    def id(self):
        """Gets the id of this StubFinding.  # noqa: E501


        :return: The id of this StubFinding.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StubFinding.


        :param id: The id of this StubFinding.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this StubFinding.  # noqa: E501


        :return: The title of this StubFinding.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StubFinding.


        :param title: The title of this StubFinding.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 1000:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def _date(self):
        """Gets the _date of this StubFinding.  # noqa: E501


        :return: The _date of this StubFinding.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this StubFinding.


        :param _date: The _date of this StubFinding.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def severity(self):
        """Gets the severity of this StubFinding.  # noqa: E501


        :return: The severity of this StubFinding.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this StubFinding.


        :param severity: The severity of this StubFinding.  # noqa: E501
        :type: str
        """
        if severity is not None and len(severity) > 200:
            raise ValueError("Invalid value for `severity`, length must be less than or equal to `200`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this StubFinding.  # noqa: E501


        :return: The description of this StubFinding.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StubFinding.


        :param description: The description of this StubFinding.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def test(self):
        """Gets the test of this StubFinding.  # noqa: E501


        :return: The test of this StubFinding.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this StubFinding.


        :param test: The test of this StubFinding.  # noqa: E501
        :type: int
        """

        self._test = test

    @property
    def reporter(self):
        """Gets the reporter of this StubFinding.  # noqa: E501


        :return: The reporter of this StubFinding.  # noqa: E501
        :rtype: int
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this StubFinding.


        :param reporter: The reporter of this StubFinding.  # noqa: E501
        :type: int
        """

        self._reporter = reporter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StubFinding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StubFinding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
