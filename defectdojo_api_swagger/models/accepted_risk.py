# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AcceptedRisk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cve': 'str',
        'justification': 'str',
        'accepted_by': 'str'
    }

    attribute_map = {
        'cve': 'cve',
        'justification': 'justification',
        'accepted_by': 'accepted_by'
    }

    def __init__(self, cve=None, justification=None, accepted_by=None):  # noqa: E501
        """AcceptedRisk - a model defined in Swagger"""  # noqa: E501

        self._cve = None
        self._justification = None
        self._accepted_by = None
        self.discriminator = None

        self.cve = cve
        self.justification = justification
        self.accepted_by = accepted_by

    @property
    def cve(self):
        """Gets the cve of this AcceptedRisk.  # noqa: E501

        CVE or vulnerability id to accept findings for  # noqa: E501

        :return: The cve of this AcceptedRisk.  # noqa: E501
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this AcceptedRisk.

        CVE or vulnerability id to accept findings for  # noqa: E501

        :param cve: The cve of this AcceptedRisk.  # noqa: E501
        :type: str
        """
        if cve is None:
            raise ValueError("Invalid value for `cve`, must not be `None`")  # noqa: E501
        if cve is not None and len(cve) > 28:
            raise ValueError("Invalid value for `cve`, length must be less than or equal to `28`")  # noqa: E501
        if cve is not None and len(cve) < 1:
            raise ValueError("Invalid value for `cve`, length must be greater than or equal to `1`")  # noqa: E501

        self._cve = cve

    @property
    def justification(self):
        """Gets the justification of this AcceptedRisk.  # noqa: E501

        Justification for accepting findings with this CVE  # noqa: E501

        :return: The justification of this AcceptedRisk.  # noqa: E501
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this AcceptedRisk.

        Justification for accepting findings with this CVE  # noqa: E501

        :param justification: The justification of this AcceptedRisk.  # noqa: E501
        :type: str
        """
        if justification is None:
            raise ValueError("Invalid value for `justification`, must not be `None`")  # noqa: E501
        if justification is not None and len(justification) < 1:
            raise ValueError("Invalid value for `justification`, length must be greater than or equal to `1`")  # noqa: E501

        self._justification = justification

    @property
    def accepted_by(self):
        """Gets the accepted_by of this AcceptedRisk.  # noqa: E501

        Name or email of person who accepts the risk  # noqa: E501

        :return: The accepted_by of this AcceptedRisk.  # noqa: E501
        :rtype: str
        """
        return self._accepted_by

    @accepted_by.setter
    def accepted_by(self, accepted_by):
        """Sets the accepted_by of this AcceptedRisk.

        Name or email of person who accepts the risk  # noqa: E501

        :param accepted_by: The accepted_by of this AcceptedRisk.  # noqa: E501
        :type: str
        """
        if accepted_by is None:
            raise ValueError("Invalid value for `accepted_by`, must not be `None`")  # noqa: E501
        if accepted_by is not None and len(accepted_by) > 200:
            raise ValueError("Invalid value for `accepted_by`, length must be less than or equal to `200`")  # noqa: E501
        if accepted_by is not None and len(accepted_by) < 1:
            raise ValueError("Invalid value for `accepted_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._accepted_by = accepted_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AcceptedRisk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AcceptedRisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
