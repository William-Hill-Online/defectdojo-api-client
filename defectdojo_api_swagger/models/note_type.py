# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NoteType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'is_single': 'bool',
        'is_active': 'bool',
        'is_mandatory': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'is_single': 'is_single',
        'is_active': 'is_active',
        'is_mandatory': 'is_mandatory'
    }

    def __init__(self, id=None, name=None, description=None, is_single=None, is_active=None, is_mandatory=None):  # noqa: E501
        """NoteType - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._is_single = None
        self._is_active = None
        self._is_mandatory = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.description = description
        if is_single is not None:
            self.is_single = is_single
        if is_active is not None:
            self.is_active = is_active
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory

    @property
    def id(self):
        """Gets the id of this NoteType.  # noqa: E501


        :return: The id of this NoteType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NoteType.


        :param id: The id of this NoteType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this NoteType.  # noqa: E501


        :return: The name of this NoteType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NoteType.


        :param name: The name of this NoteType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NoteType.  # noqa: E501


        :return: The description of this NoteType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NoteType.


        :param description: The description of this NoteType.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 200:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def is_single(self):
        """Gets the is_single of this NoteType.  # noqa: E501


        :return: The is_single of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._is_single

    @is_single.setter
    def is_single(self, is_single):
        """Sets the is_single of this NoteType.


        :param is_single: The is_single of this NoteType.  # noqa: E501
        :type: bool
        """

        self._is_single = is_single

    @property
    def is_active(self):
        """Gets the is_active of this NoteType.  # noqa: E501


        :return: The is_active of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this NoteType.


        :param is_active: The is_active of this NoteType.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this NoteType.  # noqa: E501


        :return: The is_mandatory of this NoteType.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this NoteType.


        :param is_mandatory: The is_mandatory of this NoteType.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NoteType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoteType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
