# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import defectdojo_api_client
from defectdojo_api_client.models.inline_response2004 import InlineResponse2004  # noqa: E501
from defectdojo_api_client.rest import ApiException

class TestInlineResponse2004(unittest.TestCase):
    """InlineResponse2004 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test InlineResponse2004
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = defectdojo_api_client.models.inline_response2004.InlineResponse2004()  # noqa: E501
        if include_optional :
            return InlineResponse2004(
                count = 56, 
                next = '0', 
                previous = '0', 
                results = [
                    defectdojo_api_client.models.finding.Finding(
                        id = 56, 
                        images = [
                            defectdojo_api_client.models.finding_image.FindingImage(
                                base64 = '0', 
                                caption = '0', 
                                id = 56, )
                            ], 
                        tags = [
                            '0'
                            ], 
                        accepted_risks = [
                            defectdojo_api_client.models.risk_acceptance.RiskAcceptance(
                                id = 56, 
                                name = '0', 
                                path = '0', 
                                accepted_by = '0', 
                                expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                compensating_control = '0', 
                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                owner = 56, 
                                accepted_findings = [
                                    56
                                    ], 
                                notes = [
                                    56
                                    ], )
                            ], 
                        push_to_jira = True, 
                        age = 56, 
                        sla_days_remaining = 56, 
                        title = '0', 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        cwe = -2147483648, 
                        cve = 'a', 
                        url = '0', 
                        severity = '0', 
                        description = '0', 
                        mitigation = '0', 
                        impact = '0', 
                        steps_to_reproduce = '0', 
                        severity_justification = '0', 
                        references = '0', 
                        is_template = True, 
                        active = True, 
                        verified = True, 
                        false_p = True, 
                        duplicate = True, 
                        out_of_scope = True, 
                        under_review = True, 
                        under_defect_review = True, 
                        is_mitigated = True, 
                        thread_id = 56, 
                        mitigated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        numerical_severity = '0', 
                        last_reviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        line_number = '0', 
                        sourcefilepath = '0', 
                        sourcefile = '0', 
                        param = '0', 
                        payload = '0', 
                        hash_code = '0', 
                        line = -2147483648, 
                        file_path = '0', 
                        component_name = '0', 
                        component_version = '0', 
                        static_finding = True, 
                        dynamic_finding = True, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        jira_creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        jira_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scanner_confidence = 56, 
                        unique_id_from_tool = '0', 
                        sast_source_object = '0', 
                        sast_sink_object = '0', 
                        sast_source_line = -2147483648, 
                        sast_source_file_path = '0', 
                        nb_occurences = -2147483648, 
                        test = 56, 
                        duplicate_finding = 56, 
                        review_requested_by = 56, 
                        defect_review_requested_by = 56, 
                        mitigated_by = 56, 
                        reporter = 56, 
                        last_reviewed_by = 56, 
                        sonarqube_issue = 56, 
                        endpoints = [
                            56
                            ], 
                        reviewers = [
                            56
                            ], 
                        notes = [
                            defectdojo_api_client.models.note.Note(
                                id = 56, 
                                author = defectdojo_api_client.models.author.Author(
                                    id = 56, 
                                    username = 'a', 
                                    first_name = '0', 
                                    last_name = '0', 
                                    email = '0', 
                                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                editor = defectdojo_api_client.models.author.Author(
                                    id = 56, 
                                    username = 'a', 
                                    first_name = '0', 
                                    last_name = '0', 
                                    email = '0', 
                                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                history = [
                                    defectdojo_api_client.models.note_history.NoteHistory(
                                        id = 56, 
                                        current_editor = defectdojo_api_client.models.author.Author(
                                            id = 56, 
                                            username = 'a', 
                                            first_name = '0', 
                                            last_name = '0', 
                                            email = '0', 
                                            last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                        data = '0', 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        note_type = 56, )
                                    ], 
                                entry = '0', 
                                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                private = True, 
                                edited = True, 
                                edit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                note_type = 56, )
                            ], 
                        found_by = [
                            56
                            ], )
                    ]
            )
        else :
            return InlineResponse2004(
                count = 56,
                results = [
                    defectdojo_api_client.models.finding.Finding(
                        id = 56, 
                        images = [
                            defectdojo_api_client.models.finding_image.FindingImage(
                                base64 = '0', 
                                caption = '0', 
                                id = 56, )
                            ], 
                        tags = [
                            '0'
                            ], 
                        accepted_risks = [
                            defectdojo_api_client.models.risk_acceptance.RiskAcceptance(
                                id = 56, 
                                name = '0', 
                                path = '0', 
                                accepted_by = '0', 
                                expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                compensating_control = '0', 
                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                owner = 56, 
                                accepted_findings = [
                                    56
                                    ], 
                                notes = [
                                    56
                                    ], )
                            ], 
                        push_to_jira = True, 
                        age = 56, 
                        sla_days_remaining = 56, 
                        title = '0', 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        cwe = -2147483648, 
                        cve = 'a', 
                        url = '0', 
                        severity = '0', 
                        description = '0', 
                        mitigation = '0', 
                        impact = '0', 
                        steps_to_reproduce = '0', 
                        severity_justification = '0', 
                        references = '0', 
                        is_template = True, 
                        active = True, 
                        verified = True, 
                        false_p = True, 
                        duplicate = True, 
                        out_of_scope = True, 
                        under_review = True, 
                        under_defect_review = True, 
                        is_mitigated = True, 
                        thread_id = 56, 
                        mitigated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        numerical_severity = '0', 
                        last_reviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        line_number = '0', 
                        sourcefilepath = '0', 
                        sourcefile = '0', 
                        param = '0', 
                        payload = '0', 
                        hash_code = '0', 
                        line = -2147483648, 
                        file_path = '0', 
                        component_name = '0', 
                        component_version = '0', 
                        static_finding = True, 
                        dynamic_finding = True, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        jira_creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        jira_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scanner_confidence = 56, 
                        unique_id_from_tool = '0', 
                        sast_source_object = '0', 
                        sast_sink_object = '0', 
                        sast_source_line = -2147483648, 
                        sast_source_file_path = '0', 
                        nb_occurences = -2147483648, 
                        test = 56, 
                        duplicate_finding = 56, 
                        review_requested_by = 56, 
                        defect_review_requested_by = 56, 
                        mitigated_by = 56, 
                        reporter = 56, 
                        last_reviewed_by = 56, 
                        sonarqube_issue = 56, 
                        endpoints = [
                            56
                            ], 
                        reviewers = [
                            56
                            ], 
                        notes = [
                            defectdojo_api_client.models.note.Note(
                                id = 56, 
                                author = defectdojo_api_client.models.author.Author(
                                    id = 56, 
                                    username = 'a', 
                                    first_name = '0', 
                                    last_name = '0', 
                                    email = '0', 
                                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                editor = defectdojo_api_client.models.author.Author(
                                    id = 56, 
                                    username = 'a', 
                                    first_name = '0', 
                                    last_name = '0', 
                                    email = '0', 
                                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                history = [
                                    defectdojo_api_client.models.note_history.NoteHistory(
                                        id = 56, 
                                        current_editor = defectdojo_api_client.models.author.Author(
                                            id = 56, 
                                            username = 'a', 
                                            first_name = '0', 
                                            last_name = '0', 
                                            email = '0', 
                                            last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                        data = '0', 
                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        note_type = 56, )
                                    ], 
                                entry = '0', 
                                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                private = True, 
                                edited = True, 
                                edit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                note_type = 56, )
                            ], 
                        found_by = [
                            56
                            ], )
                    ],
        )

    def testInlineResponse2004(self):
        """Test InlineResponse2004"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
