# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import defectdojo_api_client
from defectdojo_api_client.models.finding_create import FindingCreate  # noqa: E501
from defectdojo_api_client.rest import ApiException

class TestFindingCreate(unittest.TestCase):
    """FindingCreate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test FindingCreate
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = defectdojo_api_client.models.finding_create.FindingCreate()  # noqa: E501
        if include_optional :
            return FindingCreate(
                id = 56, 
                notes = [
                    56
                    ], 
                test = 56, 
                thread_id = 56, 
                found_by = [
                    56
                    ], 
                url = '0', 
                tags = [
                    '0'
                    ], 
                push_to_jira = True, 
                title = '0', 
                date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                cwe = -2147483648, 
                cve = 'a', 
                severity = '0', 
                description = '0', 
                mitigation = '0', 
                impact = '0', 
                steps_to_reproduce = '0', 
                severity_justification = '0', 
                references = '0', 
                is_template = True, 
                active = True, 
                verified = True, 
                false_p = True, 
                duplicate = True, 
                out_of_scope = True, 
                under_review = True, 
                under_defect_review = True, 
                is_mitigated = True, 
                mitigated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                numerical_severity = '0', 
                last_reviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                line_number = '0', 
                sourcefilepath = '0', 
                sourcefile = '0', 
                param = '0', 
                payload = '0', 
                hash_code = '0', 
                line = -2147483648, 
                file_path = '0', 
                component_name = '0', 
                component_version = '0', 
                static_finding = True, 
                dynamic_finding = True, 
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                jira_creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                jira_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                scanner_confidence = 56, 
                unique_id_from_tool = '0', 
                sast_source_object = '0', 
                sast_sink_object = '0', 
                sast_source_line = -2147483648, 
                sast_source_file_path = '0', 
                nb_occurences = -2147483648, 
                duplicate_finding = 56, 
                review_requested_by = 56, 
                defect_review_requested_by = 56, 
                mitigated_by = 56, 
                reporter = 56, 
                last_reviewed_by = 56, 
                sonarqube_issue = 56, 
                endpoints = [
                    56
                    ], 
                reviewers = [
                    56
                    ]
            )
        else :
            return FindingCreate(
                test = 56,
                found_by = [
                    56
                    ],
                title = '0',
                severity = '0',
                description = '0',
                mitigation = '0',
                impact = '0',
                numerical_severity = '0',
        )

    def testFindingCreate(self):
        """Test FindingCreate"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
