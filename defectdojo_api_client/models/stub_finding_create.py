# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defectdojo_api_client.configuration import Configuration


class StubFindingCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'test': 'int',
        'title': 'str',
        'date': 'date',
        'severity': 'str',
        'description': 'str',
        'reporter': 'int'
    }

    attribute_map = {
        'id': 'id',
        'test': 'test',
        'title': 'title',
        'date': 'date',
        'severity': 'severity',
        'description': 'description',
        'reporter': 'reporter'
    }

    def __init__(self, id=None, test=None, title=None, date=None, severity=None, description=None, reporter=None, local_vars_configuration=None):  # noqa: E501
        """StubFindingCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._test = None
        self._title = None
        self._date = None
        self._severity = None
        self._description = None
        self._reporter = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.test = test
        self.title = title
        if date is not None:
            self.date = date
        self.severity = severity
        self.description = description
        if reporter is not None:
            self.reporter = reporter

    @property
    def id(self):
        """Gets the id of this StubFindingCreate.  # noqa: E501


        :return: The id of this StubFindingCreate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StubFindingCreate.


        :param id: The id of this StubFindingCreate.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def test(self):
        """Gets the test of this StubFindingCreate.  # noqa: E501


        :return: The test of this StubFindingCreate.  # noqa: E501
        :rtype: int
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this StubFindingCreate.


        :param test: The test of this StubFindingCreate.  # noqa: E501
        :type test: int
        """
        if self.local_vars_configuration.client_side_validation and test is None:  # noqa: E501
            raise ValueError("Invalid value for `test`, must not be `None`")  # noqa: E501

        self._test = test

    @property
    def title(self):
        """Gets the title of this StubFindingCreate.  # noqa: E501


        :return: The title of this StubFindingCreate.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this StubFindingCreate.


        :param title: The title of this StubFindingCreate.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 1000):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def date(self):
        """Gets the date of this StubFindingCreate.  # noqa: E501


        :return: The date of this StubFindingCreate.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this StubFindingCreate.


        :param date: The date of this StubFindingCreate.  # noqa: E501
        :type date: date
        """

        self._date = date

    @property
    def severity(self):
        """Gets the severity of this StubFindingCreate.  # noqa: E501


        :return: The severity of this StubFindingCreate.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this StubFindingCreate.


        :param severity: The severity of this StubFindingCreate.  # noqa: E501
        :type severity: str
        """
        if (self.local_vars_configuration.client_side_validation and
                severity is not None and len(severity) > 200):
            raise ValueError("Invalid value for `severity`, length must be less than or equal to `200`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this StubFindingCreate.  # noqa: E501


        :return: The description of this StubFindingCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StubFindingCreate.


        :param description: The description of this StubFindingCreate.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def reporter(self):
        """Gets the reporter of this StubFindingCreate.  # noqa: E501


        :return: The reporter of this StubFindingCreate.  # noqa: E501
        :rtype: int
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this StubFindingCreate.


        :param reporter: The reporter of this StubFindingCreate.  # noqa: E501
        :type reporter: int
        """

        self._reporter = reporter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StubFindingCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StubFindingCreate):
            return True

        return self.to_dict() != other.to_dict()
