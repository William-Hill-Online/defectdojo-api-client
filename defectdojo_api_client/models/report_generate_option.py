# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defectdojo_api_client.configuration import Configuration


class ReportGenerateOption(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'include_finding_notes': 'bool',
        'include_finding_images': 'bool',
        'include_executive_summary': 'bool',
        'include_table_of_contents': 'bool'
    }

    attribute_map = {
        'include_finding_notes': 'include_finding_notes',
        'include_finding_images': 'include_finding_images',
        'include_executive_summary': 'include_executive_summary',
        'include_table_of_contents': 'include_table_of_contents'
    }

    def __init__(self, include_finding_notes=False, include_finding_images=False, include_executive_summary=False, include_table_of_contents=False, local_vars_configuration=None):  # noqa: E501
        """ReportGenerateOption - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._include_finding_notes = None
        self._include_finding_images = None
        self._include_executive_summary = None
        self._include_table_of_contents = None
        self.discriminator = None

        if include_finding_notes is not None:
            self.include_finding_notes = include_finding_notes
        if include_finding_images is not None:
            self.include_finding_images = include_finding_images
        if include_executive_summary is not None:
            self.include_executive_summary = include_executive_summary
        if include_table_of_contents is not None:
            self.include_table_of_contents = include_table_of_contents

    @property
    def include_finding_notes(self):
        """Gets the include_finding_notes of this ReportGenerateOption.  # noqa: E501


        :return: The include_finding_notes of this ReportGenerateOption.  # noqa: E501
        :rtype: bool
        """
        return self._include_finding_notes

    @include_finding_notes.setter
    def include_finding_notes(self, include_finding_notes):
        """Sets the include_finding_notes of this ReportGenerateOption.


        :param include_finding_notes: The include_finding_notes of this ReportGenerateOption.  # noqa: E501
        :type include_finding_notes: bool
        """

        self._include_finding_notes = include_finding_notes

    @property
    def include_finding_images(self):
        """Gets the include_finding_images of this ReportGenerateOption.  # noqa: E501


        :return: The include_finding_images of this ReportGenerateOption.  # noqa: E501
        :rtype: bool
        """
        return self._include_finding_images

    @include_finding_images.setter
    def include_finding_images(self, include_finding_images):
        """Sets the include_finding_images of this ReportGenerateOption.


        :param include_finding_images: The include_finding_images of this ReportGenerateOption.  # noqa: E501
        :type include_finding_images: bool
        """

        self._include_finding_images = include_finding_images

    @property
    def include_executive_summary(self):
        """Gets the include_executive_summary of this ReportGenerateOption.  # noqa: E501


        :return: The include_executive_summary of this ReportGenerateOption.  # noqa: E501
        :rtype: bool
        """
        return self._include_executive_summary

    @include_executive_summary.setter
    def include_executive_summary(self, include_executive_summary):
        """Sets the include_executive_summary of this ReportGenerateOption.


        :param include_executive_summary: The include_executive_summary of this ReportGenerateOption.  # noqa: E501
        :type include_executive_summary: bool
        """

        self._include_executive_summary = include_executive_summary

    @property
    def include_table_of_contents(self):
        """Gets the include_table_of_contents of this ReportGenerateOption.  # noqa: E501


        :return: The include_table_of_contents of this ReportGenerateOption.  # noqa: E501
        :rtype: bool
        """
        return self._include_table_of_contents

    @include_table_of_contents.setter
    def include_table_of_contents(self, include_table_of_contents):
        """Sets the include_table_of_contents of this ReportGenerateOption.


        :param include_table_of_contents: The include_table_of_contents of this ReportGenerateOption.  # noqa: E501
        :type include_table_of_contents: bool
        """

        self._include_table_of_contents = include_table_of_contents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportGenerateOption):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportGenerateOption):
            return True

        return self.to_dict() != other.to_dict()
