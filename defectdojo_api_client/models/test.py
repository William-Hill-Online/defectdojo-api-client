# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defectdojo_api_client.configuration import Configuration


class Test(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'tags': 'list[str]',
        'test_type_name': 'str',
        'title': 'str',
        'description': 'str',
        'target_start': 'datetime',
        'target_end': 'datetime',
        'estimated_time': 'str',
        'actual_time': 'str',
        'percent_complete': 'int',
        'updated': 'datetime',
        'created': 'datetime',
        'version': 'str',
        'engagement': 'int',
        'lead': 'int',
        'test_type': 'int',
        'environment': 'int',
        'notes': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'tags': 'tags',
        'test_type_name': 'test_type_name',
        'title': 'title',
        'description': 'description',
        'target_start': 'target_start',
        'target_end': 'target_end',
        'estimated_time': 'estimated_time',
        'actual_time': 'actual_time',
        'percent_complete': 'percent_complete',
        'updated': 'updated',
        'created': 'created',
        'version': 'version',
        'engagement': 'engagement',
        'lead': 'lead',
        'test_type': 'test_type',
        'environment': 'environment',
        'notes': 'notes'
    }

    def __init__(self, id=None, tags=None, test_type_name=None, title=None, description=None, target_start=None, target_end=None, estimated_time=None, actual_time=None, percent_complete=None, updated=None, created=None, version=None, engagement=None, lead=None, test_type=None, environment=None, notes=None, local_vars_configuration=None):  # noqa: E501
        """Test - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._tags = None
        self._test_type_name = None
        self._title = None
        self._description = None
        self._target_start = None
        self._target_end = None
        self._estimated_time = None
        self._actual_time = None
        self._percent_complete = None
        self._updated = None
        self._created = None
        self._version = None
        self._engagement = None
        self._lead = None
        self._test_type = None
        self._environment = None
        self._notes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tags is not None:
            self.tags = tags
        if test_type_name is not None:
            self.test_type_name = test_type_name
        self.title = title
        self.description = description
        self.target_start = target_start
        self.target_end = target_end
        if estimated_time is not None:
            self.estimated_time = estimated_time
        if actual_time is not None:
            self.actual_time = actual_time
        self.percent_complete = percent_complete
        if updated is not None:
            self.updated = updated
        if created is not None:
            self.created = created
        self.version = version
        if engagement is not None:
            self.engagement = engagement
        self.lead = lead
        self.test_type = test_type
        self.environment = environment
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this Test.  # noqa: E501


        :return: The id of this Test.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Test.


        :param id: The id of this Test.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this Test.  # noqa: E501


        :return: The tags of this Test.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Test.


        :param tags: The tags of this Test.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def test_type_name(self):
        """Gets the test_type_name of this Test.  # noqa: E501


        :return: The test_type_name of this Test.  # noqa: E501
        :rtype: str
        """
        return self._test_type_name

    @test_type_name.setter
    def test_type_name(self, test_type_name):
        """Sets the test_type_name of this Test.


        :param test_type_name: The test_type_name of this Test.  # noqa: E501
        :type test_type_name: str
        """

        self._test_type_name = test_type_name

    @property
    def title(self):
        """Gets the title of this Test.  # noqa: E501


        :return: The title of this Test.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Test.


        :param title: The title of this Test.  # noqa: E501
        :type title: str
        """
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) > 255):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `255`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Test.  # noqa: E501


        :return: The description of this Test.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Test.


        :param description: The description of this Test.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def target_start(self):
        """Gets the target_start of this Test.  # noqa: E501


        :return: The target_start of this Test.  # noqa: E501
        :rtype: datetime
        """
        return self._target_start

    @target_start.setter
    def target_start(self, target_start):
        """Sets the target_start of this Test.


        :param target_start: The target_start of this Test.  # noqa: E501
        :type target_start: datetime
        """
        if self.local_vars_configuration.client_side_validation and target_start is None:  # noqa: E501
            raise ValueError("Invalid value for `target_start`, must not be `None`")  # noqa: E501

        self._target_start = target_start

    @property
    def target_end(self):
        """Gets the target_end of this Test.  # noqa: E501


        :return: The target_end of this Test.  # noqa: E501
        :rtype: datetime
        """
        return self._target_end

    @target_end.setter
    def target_end(self, target_end):
        """Sets the target_end of this Test.


        :param target_end: The target_end of this Test.  # noqa: E501
        :type target_end: datetime
        """
        if self.local_vars_configuration.client_side_validation and target_end is None:  # noqa: E501
            raise ValueError("Invalid value for `target_end`, must not be `None`")  # noqa: E501

        self._target_end = target_end

    @property
    def estimated_time(self):
        """Gets the estimated_time of this Test.  # noqa: E501


        :return: The estimated_time of this Test.  # noqa: E501
        :rtype: str
        """
        return self._estimated_time

    @estimated_time.setter
    def estimated_time(self, estimated_time):
        """Sets the estimated_time of this Test.


        :param estimated_time: The estimated_time of this Test.  # noqa: E501
        :type estimated_time: str
        """

        self._estimated_time = estimated_time

    @property
    def actual_time(self):
        """Gets the actual_time of this Test.  # noqa: E501


        :return: The actual_time of this Test.  # noqa: E501
        :rtype: str
        """
        return self._actual_time

    @actual_time.setter
    def actual_time(self, actual_time):
        """Sets the actual_time of this Test.


        :param actual_time: The actual_time of this Test.  # noqa: E501
        :type actual_time: str
        """

        self._actual_time = actual_time

    @property
    def percent_complete(self):
        """Gets the percent_complete of this Test.  # noqa: E501


        :return: The percent_complete of this Test.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this Test.


        :param percent_complete: The percent_complete of this Test.  # noqa: E501
        :type percent_complete: int
        """
        if (self.local_vars_configuration.client_side_validation and
                percent_complete is not None and percent_complete > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `percent_complete`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                percent_complete is not None and percent_complete < -2147483648):  # noqa: E501
            raise ValueError("Invalid value for `percent_complete`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._percent_complete = percent_complete

    @property
    def updated(self):
        """Gets the updated of this Test.  # noqa: E501


        :return: The updated of this Test.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Test.


        :param updated: The updated of this Test.  # noqa: E501
        :type updated: datetime
        """

        self._updated = updated

    @property
    def created(self):
        """Gets the created of this Test.  # noqa: E501


        :return: The created of this Test.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Test.


        :param created: The created of this Test.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def version(self):
        """Gets the version of this Test.  # noqa: E501


        :return: The version of this Test.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Test.


        :param version: The version of this Test.  # noqa: E501
        :type version: str
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and len(version) > 100):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `100`")  # noqa: E501

        self._version = version

    @property
    def engagement(self):
        """Gets the engagement of this Test.  # noqa: E501


        :return: The engagement of this Test.  # noqa: E501
        :rtype: int
        """
        return self._engagement

    @engagement.setter
    def engagement(self, engagement):
        """Sets the engagement of this Test.


        :param engagement: The engagement of this Test.  # noqa: E501
        :type engagement: int
        """

        self._engagement = engagement

    @property
    def lead(self):
        """Gets the lead of this Test.  # noqa: E501


        :return: The lead of this Test.  # noqa: E501
        :rtype: int
        """
        return self._lead

    @lead.setter
    def lead(self, lead):
        """Sets the lead of this Test.


        :param lead: The lead of this Test.  # noqa: E501
        :type lead: int
        """

        self._lead = lead

    @property
    def test_type(self):
        """Gets the test_type of this Test.  # noqa: E501


        :return: The test_type of this Test.  # noqa: E501
        :rtype: int
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this Test.


        :param test_type: The test_type of this Test.  # noqa: E501
        :type test_type: int
        """
        if self.local_vars_configuration.client_side_validation and test_type is None:  # noqa: E501
            raise ValueError("Invalid value for `test_type`, must not be `None`")  # noqa: E501

        self._test_type = test_type

    @property
    def environment(self):
        """Gets the environment of this Test.  # noqa: E501


        :return: The environment of this Test.  # noqa: E501
        :rtype: int
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this Test.


        :param environment: The environment of this Test.  # noqa: E501
        :type environment: int
        """

        self._environment = environment

    @property
    def notes(self):
        """Gets the notes of this Test.  # noqa: E501


        :return: The notes of this Test.  # noqa: E501
        :rtype: list[int]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Test.


        :param notes: The notes of this Test.  # noqa: E501
        :type notes: list[int]
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Test):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Test):
            return True

        return self.to_dict() != other.to_dict()
