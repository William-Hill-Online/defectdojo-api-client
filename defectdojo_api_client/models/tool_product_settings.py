# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defectdojo_api_client.configuration import Configuration


class ToolProductSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'setting_url': 'str',
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'tool_project_id': 'str',
        'product': 'int',
        'tool_configuration': 'int',
        'notes': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'setting_url': 'setting_url',
        'name': 'name',
        'description': 'description',
        'url': 'url',
        'tool_project_id': 'tool_project_id',
        'product': 'product',
        'tool_configuration': 'tool_configuration',
        'notes': 'notes'
    }

    def __init__(self, id=None, setting_url=None, name=None, description=None, url=None, tool_project_id=None, product=None, tool_configuration=None, notes=None, local_vars_configuration=None):  # noqa: E501
        """ToolProductSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._setting_url = None
        self._name = None
        self._description = None
        self._url = None
        self._tool_project_id = None
        self._product = None
        self._tool_configuration = None
        self._notes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.setting_url = setting_url
        self.name = name
        self.description = description
        self.url = url
        self.tool_project_id = tool_project_id
        if product is not None:
            self.product = product
        self.tool_configuration = tool_configuration
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this ToolProductSettings.  # noqa: E501


        :return: The id of this ToolProductSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ToolProductSettings.


        :param id: The id of this ToolProductSettings.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def setting_url(self):
        """Gets the setting_url of this ToolProductSettings.  # noqa: E501


        :return: The setting_url of this ToolProductSettings.  # noqa: E501
        :rtype: str
        """
        return self._setting_url

    @setting_url.setter
    def setting_url(self, setting_url):
        """Sets the setting_url of this ToolProductSettings.


        :param setting_url: The setting_url of this ToolProductSettings.  # noqa: E501
        :type setting_url: str
        """
        if self.local_vars_configuration.client_side_validation and setting_url is None:  # noqa: E501
            raise ValueError("Invalid value for `setting_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                setting_url is not None and len(setting_url) < 1):
            raise ValueError("Invalid value for `setting_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._setting_url = setting_url

    @property
    def name(self):
        """Gets the name of this ToolProductSettings.  # noqa: E501


        :return: The name of this ToolProductSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ToolProductSettings.


        :param name: The name of this ToolProductSettings.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 200):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ToolProductSettings.  # noqa: E501


        :return: The description of this ToolProductSettings.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ToolProductSettings.


        :param description: The description of this ToolProductSettings.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 2000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `2000`")  # noqa: E501

        self._description = description

    @property
    def url(self):
        """Gets the url of this ToolProductSettings.  # noqa: E501


        :return: The url of this ToolProductSettings.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ToolProductSettings.


        :param url: The url of this ToolProductSettings.  # noqa: E501
        :type url: str
        """
        if (self.local_vars_configuration.client_side_validation and
                url is not None and len(url) > 2000):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2000`")  # noqa: E501

        self._url = url

    @property
    def tool_project_id(self):
        """Gets the tool_project_id of this ToolProductSettings.  # noqa: E501


        :return: The tool_project_id of this ToolProductSettings.  # noqa: E501
        :rtype: str
        """
        return self._tool_project_id

    @tool_project_id.setter
    def tool_project_id(self, tool_project_id):
        """Sets the tool_project_id of this ToolProductSettings.


        :param tool_project_id: The tool_project_id of this ToolProductSettings.  # noqa: E501
        :type tool_project_id: str
        """
        if (self.local_vars_configuration.client_side_validation and
                tool_project_id is not None and len(tool_project_id) > 200):
            raise ValueError("Invalid value for `tool_project_id`, length must be less than or equal to `200`")  # noqa: E501

        self._tool_project_id = tool_project_id

    @property
    def product(self):
        """Gets the product of this ToolProductSettings.  # noqa: E501


        :return: The product of this ToolProductSettings.  # noqa: E501
        :rtype: int
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ToolProductSettings.


        :param product: The product of this ToolProductSettings.  # noqa: E501
        :type product: int
        """

        self._product = product

    @property
    def tool_configuration(self):
        """Gets the tool_configuration of this ToolProductSettings.  # noqa: E501


        :return: The tool_configuration of this ToolProductSettings.  # noqa: E501
        :rtype: int
        """
        return self._tool_configuration

    @tool_configuration.setter
    def tool_configuration(self, tool_configuration):
        """Sets the tool_configuration of this ToolProductSettings.


        :param tool_configuration: The tool_configuration of this ToolProductSettings.  # noqa: E501
        :type tool_configuration: int
        """
        if self.local_vars_configuration.client_side_validation and tool_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `tool_configuration`, must not be `None`")  # noqa: E501

        self._tool_configuration = tool_configuration

    @property
    def notes(self):
        """Gets the notes of this ToolProductSettings.  # noqa: E501


        :return: The notes of this ToolProductSettings.  # noqa: E501
        :rtype: list[int]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ToolProductSettings.


        :param notes: The notes of this ToolProductSettings.  # noqa: E501
        :type notes: list[int]
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolProductSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ToolProductSettings):
            return True

        return self.to_dict() != other.to_dict()
