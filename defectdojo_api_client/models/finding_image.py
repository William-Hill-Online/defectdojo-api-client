# coding: utf-8

"""
    Defect Dojo API

    To use the API you need be authorized.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from defectdojo_api_client.configuration import Configuration


class FindingImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base64': 'str',
        'caption': 'str',
        'id': 'int'
    }

    attribute_map = {
        'base64': 'base64',
        'caption': 'caption',
        'id': 'id'
    }

    def __init__(self, base64=None, caption=None, id=None, local_vars_configuration=None):  # noqa: E501
        """FindingImage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base64 = None
        self._caption = None
        self._id = None
        self.discriminator = None

        if base64 is not None:
            self.base64 = base64
        if caption is not None:
            self.caption = caption
        if id is not None:
            self.id = id

    @property
    def base64(self):
        """Gets the base64 of this FindingImage.  # noqa: E501


        :return: The base64 of this FindingImage.  # noqa: E501
        :rtype: str
        """
        return self._base64

    @base64.setter
    def base64(self, base64):
        """Sets the base64 of this FindingImage.


        :param base64: The base64 of this FindingImage.  # noqa: E501
        :type base64: str
        """

        self._base64 = base64

    @property
    def caption(self):
        """Gets the caption of this FindingImage.  # noqa: E501


        :return: The caption of this FindingImage.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this FindingImage.


        :param caption: The caption of this FindingImage.  # noqa: E501
        :type caption: str
        """
        if (self.local_vars_configuration.client_side_validation and
                caption is not None and len(caption) > 500):
            raise ValueError("Invalid value for `caption`, length must be less than or equal to `500`")  # noqa: E501

        self._caption = caption

    @property
    def id(self):
        """Gets the id of this FindingImage.  # noqa: E501


        :return: The id of this FindingImage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FindingImage.


        :param id: The id of this FindingImage.  # noqa: E501
        :type id: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FindingImage):
            return True

        return self.to_dict() != other.to_dict()
